-- In lua/keybindings.lua
-- Add all Vim keybindings from ":h index"
local common_vim_keybindings = {
  -- Insert mode
  { mode = 'Insert', lhs = '<C-@>', desc = 'Insert previously inserted text and stop insert' },
  { mode = 'Insert', lhs = '<C-A>', desc = 'Insert previously inserted text' },
  { mode = 'Insert', lhs = '<C-C>', desc = 'Quit insert mode, without checking for abbreviation' },
  { mode = 'Insert', lhs = '<C-D>', desc = 'Delete one shiftwidth of indent in the current line' },
  { mode = 'Insert', lhs = '<C-E>', desc = 'Insert the character which is below the cursor' },
  { mode = 'Insert', lhs = '<C-G> <C-J>', desc = 'Line down, to column where inserting started' },
  { mode = 'Insert', lhs = '<C-G> j', desc = 'Line down, to column where inserting started' },
  { mode = 'Insert', lhs = '<C-G> <Down>', desc = 'Line down, to column where inserting started' },
  { mode = 'Insert', lhs = '<C-G> <C-K>', desc = 'Line up, to column where inserting started' },
  { mode = 'Insert', lhs = '<C-G> k', desc = 'Line up, to column where inserting started' },
  { mode = 'Insert', lhs = '<C-G> <Up>', desc = 'Line up, to column where inserting started' },
  { mode = 'Insert', lhs = '<C-G> u', desc = 'Start new undoable edit' },
  { mode = 'Insert', lhs = '<C-G> U', desc = 'Don\'t break undo with next cursor movement' },
  { mode = 'Insert', lhs = '<BS>', desc = 'Delete character before the cursor' },
  { mode = 'Insert', lhs = '{char1}<BS>{char2}', desc = 'Enter digraph (only when digraph option set)' },
  { mode = 'Insert', lhs = '<C-H>', desc = 'Same as <BS>' },
  { mode = 'Insert', lhs = '<Tab>', desc = 'Insert a <Tab> character' },
  { mode = 'Insert', lhs = '<C-I>', desc = 'Same as <Tab>' },
  { mode = 'Insert', lhs = '<NL>', desc = 'Same as <CR>' },
  { mode = 'Insert', lhs = '<C-J>', desc = 'Same as <CR>' },
  { mode = 'Insert', lhs = '<C-K> {char1} {char2}', desc = 'Enter digraph' },
  { mode = 'Insert', lhs = '<CR>', desc = 'Begin new line' },
  { mode = 'Insert', lhs = '<C-M>', desc = 'Same as <CR>' },
  { mode = 'Insert', lhs = '<C-N>', desc = 'Find next match for keyword in front of the cursor' },
  { mode = 'Insert', lhs = '<C-O>', desc = 'Execute a single command and return to insert mode' },
  { mode = 'Insert', lhs = '<C-P>', desc = 'Find previous match for keyword in front of the cursor' },
  { mode = 'Insert', lhs = '<C-Q>', desc = 'Same as <C-V>, unless used for terminal control flow' },
  { mode = 'Insert', lhs = '<C-R> {register}', desc = 'Insert the contents of a register' },
  { mode = 'Insert', lhs = '<C-R> <C-R> {register}', desc = 'Insert the contents of a register literally' },
  { mode = 'Insert', lhs = '<C-R> <C-O> {register}', desc = 'Insert the contents of a register literally and don\'t auto-indent' },
  { mode = 'Insert', lhs = '<C-R> <C-P> {register}', desc = 'Insert the contents of a register literally and fix indent' },
  { mode = 'Insert', lhs = '<C-S>', desc = 'Terminal control flow or not used' },
  { mode = 'Insert', lhs = '<C-T>', desc = 'Insert one shiftwidth of indent in current line' },
  { mode = 'Insert', lhs = '<C-U>', desc = 'Delete all entered characters in the current line' },
  { mode = 'Insert', lhs = '<C-V> {char}', desc = 'Insert next non-digit literally' },
  { mode = 'Insert', lhs = '<C-W>', desc = 'Delete word before the cursor' },
  { mode = 'Insert', lhs = '<C-X> {mode}', desc = 'Enter CTRL-X submode, see i_CTRL-X_index' },
  { mode = 'Insert', lhs = '<C-Y>', desc = 'Insert the character which is above the cursor' },
  { mode = 'Insert', lhs = '<Esc>', desc = 'End insert mode' },
  { mode = 'Insert', lhs = '<C-[>', desc = 'Same as <Esc>' },
  { mode = 'Insert', lhs = '<C-\\> <C-N>', desc = 'Go to Normal mode' },
  { mode = 'Insert', lhs = '<C-\\> <C-G>', desc = 'Go to Normal mode' },
  { mode = 'Insert', lhs = '<C-]>', desc = 'Trigger abbreviation' },
  { mode = 'Insert', lhs = '<C-^>', desc = 'Toggle use of :lmap mappings' },
  { mode = 'Insert', lhs = '<C-_>', desc = 'When allowrevins set, toggle revins' },
  { mode = 'Insert', lhs = '0 <C-D>', desc = 'Delete all indent in the current line' },
  { mode = 'Insert', lhs = '^ <C-D>', desc = 'Delete all indent in the current line, restore it in the next line' },
  { mode = 'Insert', lhs = '<Del>', desc = 'Delete character under the cursor' },
  { mode = 'Insert', lhs = '<Left>', desc = 'Cursor one character left' },
  { mode = 'Insert', lhs = '<S-Left>', desc = 'Cursor one word left' },
  { mode = 'Insert', lhs = '<C-Left>', desc = 'Cursor one word left' },
  { mode = 'Insert', lhs = '<Right>', desc = 'Cursor one character right' },
  { mode = 'Insert', lhs = '<S-Right>', desc = 'Cursor one word right' },
  { mode = 'Insert', lhs = '<C-Right>', desc = 'Cursor one word right' },
  { mode = 'Insert', lhs = '<Up>', desc = 'Cursor one line up' },
  { mode = 'Insert', lhs = '<S-Up>', desc = 'Same as <PageUp>' },
  { mode = 'Insert', lhs = '<Down>', desc = 'Cursor one line down' },
  { mode = 'Insert', lhs = '<S-Down>', desc = 'Same as <PageDown>' },
  { mode = 'Insert', lhs = '<Home>', desc = 'Cursor to start of line' },
  { mode = 'Insert', lhs = '<C-Home>', desc = 'Cursor to start of file' },
  { mode = 'Insert', lhs = '<End>', desc = 'Cursor past end of line' },
  { mode = 'Insert', lhs = '<C-End>', desc = 'Cursor past end of file' },
  { mode = 'Insert', lhs = '<PageUp>', desc = 'One screenful backward' },
  { mode = 'Insert', lhs = '<PageDown>', desc = 'One screenful forward' },
  { mode = 'Insert', lhs = '<F1>', desc = 'Same as <Help>' },
  { mode = 'Insert', lhs = '<Help>', desc = 'Stop insert mode and display help window' },
  { mode = 'Insert', lhs = '<Insert>', desc = 'Toggle Insert/Replace mode' },
  { mode = 'Insert', lhs = '<LeftMouse>', desc = 'Cursor at mouse click' },
  { mode = 'Insert', lhs = '<ScrollWheelDown>', desc = 'Move window three lines down' },
  { mode = 'Insert', lhs = '<S-ScrollWheelDown>', desc = 'Move window one page down' },
  { mode = 'Insert', lhs = '<ScrollWheelUp>', desc = 'Move window three lines up' },
  { mode = 'Insert', lhs = '<S-ScrollWheelUp>', desc = 'Move window one page up' },
  { mode = 'Insert', lhs = '<ScrollWheelLeft>', desc = 'Move window six columns left' },
  { mode = 'Insert', lhs = '<S-ScrollWheelLeft>', desc = 'Move window one page left' },
  { mode = 'Insert', lhs = '<ScrollWheelRight>', desc = 'Move window six columns right' },
  { mode = 'Insert', lhs = '<S-ScrollWheelRight>', desc = 'Move window one page right' },
  { mode = 'Insert', lhs = '<C-E>', desc = 'Stop completion and go back to original text' },
  { mode = 'Insert', lhs = '<C-Y>', desc = 'Accept selected match and stop completion' },
  { mode = 'Insert', lhs = '<C-L>', desc = 'Insert one character from the current match' },
  { mode = 'Insert', lhs = '<CR>', desc = 'Insert currently selected match' },
  { mode = 'Insert', lhs = '<BS>', desc = 'Delete one character and redo search' },
  { mode = 'Insert', lhs = '<C-H>', desc = 'Same as <BS>' },
  { mode = 'Insert', lhs = '<Up>', desc = 'Select the previous match' },
  { mode = 'Insert', lhs = '<Down>', desc = 'Select the next match' },
  { mode = 'Insert', lhs = '<PageUp>', desc = 'Select a match several entries back' },
  { mode = 'Insert', lhs = '<PageDown>', desc = 'Select a match several entries forward' },
  { mode = 'Insert', lhs = 'other', desc = 'Stop completion and insert the typed character' },
  -- Normal mode
  { mode = 'Normal', lhs = '<C-@>', desc = 'Not used' },
  { mode = 'Normal', lhs = '<C-A>', desc = 'Add N to number at/after cursor' },
  { mode = 'Normal', lhs = '<C-B>', desc = 'Scroll N screens backwards' },
  { mode = 'Normal', lhs = '<C-C>', desc = 'Interrupt current (search) command' },
  { mode = 'Normal', lhs = '<C-D>', desc = 'Scroll down N lines (default: half a screen)' },
  { mode = 'Normal', lhs = '<C-E>', desc = 'Scroll N lines upwards' },
  { mode = 'Normal', lhs = '<C-F>', desc = 'Scroll N screens forward' },
  { mode = 'Normal', lhs = '<C-G>', desc = 'Display current file name and position' },
  { mode = 'Normal', lhs = '<BS>', desc = 'Same as "h"' },
  { mode = 'Normal', lhs = '<C-H>', desc = 'Same as "h"' },
  { mode = 'Normal', lhs = '<Tab>', desc = 'Go to N newer entry in jump list' },
  { mode = 'Normal', lhs = '<C-I>', desc = 'Same as <Tab>' },
  { mode = 'Normal', lhs = '<NL>', desc = 'Same as "j"' },
  { mode = 'Normal', lhs = '<C-J>', desc = 'Same as "j"' },
  { mode = 'Normal', lhs = '<C-L>', desc = 'Redraw screen' },
  { mode = 'Normal', lhs = '<CR>', desc = 'Cursor to the first CHAR N lines lower' },
  { mode = 'Normal', lhs = '<C-M>', desc = 'Same as <CR>' },
  { mode = 'Normal', lhs = '<C-N>', desc = 'Same as "j"' },
  { mode = 'Normal', lhs = '<C-O>', desc = 'Go to N older entry in jump list' },
  { mode = 'Normal', lhs = '<C-P>', desc = 'Same as "k"' },
  { mode = 'Normal', lhs = '<C-R>', desc = 'Redo changes which were undone with "u"' },
  { mode = 'Normal', lhs = '<C-T>', desc = 'Jump to N older tag in tag list' },
  { mode = 'Normal', lhs = '<C-U>', desc = 'Scroll N lines upwards (default: half a screen)' },
  { mode = 'Normal', lhs = '<C-V>', desc = 'Start blockwise visual mode' },
  { mode = 'Normal', lhs = '<C-W>', desc = 'Window commands, see |CTRL-W|' },
  { mode = 'Normal', lhs = '<C-X>', desc = 'Subtract N from number at/after cursor' },
  { mode = 'Normal', lhs = '<C-Y>', desc = 'Scroll N lines downwards' },
  { mode = 'Normal', lhs = '<C-Z>', desc = 'Suspend program (or start new shell)' },
  { mode = 'Normal', lhs = '<C-\\><C-N>', desc = 'Go to normal mode (no-op)' },
  { mode = 'Normal', lhs = '<C-\\><C-G>', desc = 'Go to normal mode (no-op)' },
  { mode = 'Normal', lhs = '<C-]>', desc = ':ta to ident under cursor' },
  { mode = 'Normal', lhs = '<C-^>', desc = 'Edit Nth alternate file (equivalent to ":e #N")' },
  { mode = 'Normal', lhs = '<C-Tab>', desc = 'Go to last accessed tab page' },
  { mode = 'Normal', lhs = '<Space>', desc = 'Same as "l"' },
  { mode = 'Normal', lhs = '!', desc = 'Filter Nmove text through the {filter} command' },
  { mode = 'Normal', lhs = '!!', desc = 'Filter N lines through the {filter} command' },
  { mode = 'Normal', lhs = '"', desc = 'Use {register} for next delete, yank or put' },
  { mode = 'Normal', lhs = '#', desc = 'Search backward for the Nth occurrence of the ident under the cursor' },
  { mode = 'Normal', lhs = '$', desc = 'Cursor to the end of Nth next line' },
  { mode = 'Normal', lhs = '%', desc = 'Find next matching bracket or comment directive' },
  { mode = 'Normal', lhs = '&', desc = 'Repeat last :s' },
  { mode = 'Normal', lhs = "'", desc = 'Cursor to the first CHAR on the line with mark {a-zA-Z0-9}' },
  { mode = 'Normal', lhs = '(', desc = 'Cursor N sentences backward' },
  { mode = 'Normal', lhs = ')', desc = 'Cursor N sentences forward' },
  { mode = 'Normal', lhs = '*', desc = 'Search forward for the Nth occurrence of the ident under the cursor' },
  { mode = 'Normal', lhs = '+', desc = 'Same as <CR>' },
  { mode = 'Normal', lhs = ',', desc = 'Repeat latest f, t, F or T in opposite direction N times' },
  { mode = 'Normal', lhs = '-', desc = 'Cursor to the first CHAR N lines higher' },
  { mode = 'Normal', lhs = '.', desc = 'Repeat last change with count replaced with N' },
  { mode = 'Normal', lhs = '/', desc = 'Search forward for the Nth occurrence of {pattern}' },
  { mode = 'Normal', lhs = '0', desc = 'Cursor to the first char of the line' },
  { mode = 'Normal', lhs = ':', desc = 'Start entering an Ex command' },
  { mode = 'Normal', lhs = ';', desc = 'Repeat latest f, t, F or T N times' },
  { mode = 'Normal', lhs = '<', desc = 'Shift Nmove lines one shiftwidth leftwards' },
  { mode = 'Normal', lhs = '=', desc = 'Filter Nmove lines through "indent"' },
  { mode = 'Normal', lhs = '>', desc = 'Shift Nmove lines one shiftwidth rightwards' },
  { mode = 'Normal', lhs = '?', desc = 'Search backward for the Nth occurrence of {pattern}' },
  { mode = 'Normal', lhs = '@', desc = 'Execute the contents of register {a-z} N times' },
  { mode = 'Normal', lhs = 'A', desc = 'Append text after the end of the line N times' },
  { mode = 'Normal', lhs = 'B', desc = 'Cursor N WORDS backward' },
  { mode = 'Normal', lhs = 'C', desc = 'Change from cursor to end of line, and N-1 more lines' },
  { mode = 'Normal', lhs = 'D', desc = 'Delete from cursor to end of line and N-1 more lines' },
  { mode = 'Normal', lhs = 'E', desc = 'Cursor forward to the end of WORD N' },
  { mode = 'Normal', lhs = 'F', desc = 'Cursor to Nth occurrence of {char} to the left' },
  { mode = 'Normal', lhs = 'G', desc = 'Cursor to line N, default last line' },
  { mode = 'Normal', lhs = 'H', desc = 'Cursor to line N from top of screen' },
  { mode = 'Normal', lhs = 'I', desc = 'Insert text before the first CHAR on the line N times' },
  { mode = 'Normal', lhs = 'J', desc = 'Join N lines; default is 2' },
  { mode = 'Normal', lhs = 'K', desc = 'Lookup keyword under the cursor with "keywordprg"' },
  { mode = 'Normal', lhs = 'L', desc = 'Cursor to line N from bottom of screen' },
  { mode = 'Normal', lhs = 'M', desc = 'Cursor to middle line of screen' },
  { mode = 'Normal', lhs = 'N', desc = 'Repeat latest "/" or "?" N times in opposite direction' },
  { mode = 'Normal', lhs = 'O', desc = 'Begin a new line above the cursor and insert text, repeat N times' },
  { mode = 'Normal', lhs = 'P', desc = 'Put the text [from register x] before the cursor N times' },
  { mode = 'Normal', lhs = 'Q', desc = 'Replay last recorded register' },
  { mode = 'Normal', lhs = 'R', desc = 'Enter replace mode: overtype existing characters, repeat N-1 times' },
  { mode = 'Normal', lhs = 'S', desc = 'Delete N lines [into register x] and start insert' },
  { mode = 'Normal', lhs = 'T', desc = 'Cursor till after Nth occurrence of {char} to the left' },
  { mode = 'Normal', lhs = 'U', desc = 'Undo all latest changes on one line' },
  { mode = 'Normal', lhs = 'V', desc = 'Start linewise visual mode' },
  { mode = 'Normal', lhs = 'W', desc = 'Cursor N WORDS forward' },
  { mode = 'Normal', lhs = 'X', desc = 'Delete N characters before the cursor [into register x]' },
  { mode = 'Normal', lhs = 'Y', desc = 'Yank N lines [into register x]' },
  { mode = 'Normal', lhs = 'ZZ', desc = 'Write if buffer changed and close window' },
  { mode = 'Normal', lhs = 'ZQ', desc = 'Close window without writing' },
  { mode = 'Normal', lhs = '^', desc = 'Cursor to the first CHAR of the line' },
  { mode = 'Normal', lhs = '_', desc = 'Cursor to the first CHAR N - 1 lines lower' },
  { mode = 'Normal', lhs = '`', desc = 'Cursor to the mark {a-zA-Z0-9}' },
  { mode = 'Normal', lhs = 'a', desc = 'Append text after the cursor N times' },
  { mode = 'Normal', lhs = 'b', desc = 'Cursor N words backward' },
  { mode = 'Normal', lhs = 'c', desc = 'Delete Nmove text [into register x] and start insert' },
  { mode = 'Normal', lhs = 'd', desc = 'Delete Nmove text [into register x]' },
  { mode = 'Normal', lhs = 'e', desc = 'Cursor forward to the end of word N' },
  { mode = 'Normal', lhs = 'f', desc = 'Cursor to Nth occurrence of {char} to the right' },
  { mode = 'Normal', lhs = 'g', desc = 'Extended commands, see |g| below' },
  { mode = 'Normal', lhs = 'h', desc = 'Cursor N chars to the left' },
  { mode = 'Normal', lhs = 'i', desc = 'Insert text before the cursor N times' },
  { mode = 'Normal', lhs = 'j', desc = 'Cursor N lines downward' },
  { mode = 'Normal', lhs = 'k', desc = 'Cursor N lines upward' },
  { mode = 'Normal', lhs = 'l', desc = 'Cursor N chars to the right' },
  { mode = 'Normal', lhs = 'm', desc = 'Set mark {A-Za-z} at cursor position' },
  { mode = 'Normal', lhs = 'n', desc = 'Repeat latest "/" or "?" N times' },
  { mode = 'Normal', lhs = 'o', desc = 'Begin a new line below the cursor and insert text, repeat N times' },
  { mode = 'Normal', lhs = 'p', desc = 'Put the text [from register x] after the cursor N times' },
  { mode = 'Normal', lhs = 'q', desc = 'Record typed characters into named register {0-9a-zA-Z}' },
  { mode = 'Normal', lhs = 'r', desc = 'Replace N chars with {char}' },
  { mode = 'Normal', lhs = 's', desc = 'Delete N characters [into register x] and start insert' },
  { mode = 'Normal', lhs = 't', desc = 'Cursor till before Nth occurrence of {char} to the right' },
  { mode = 'Normal', lhs = 'u', desc = 'Undo changes' },
  { mode = 'Normal', lhs = 'v', desc = 'Start charwise visual mode' },
  { mode = 'Normal', lhs = 'w', desc = 'Cursor N words forward' },
  { mode = 'Normal', lhs = 'x', desc = 'Delete N characters under and after the cursor [into register x]' },
  { mode = 'Normal', lhs = 'y', desc = 'Yank Nmove text [into register x]' },
  { mode = 'Normal', lhs = 'z', desc = 'Commands starting with "z", see |z| below' },
  { mode = 'Normal', lhs = '{', desc = 'Cursor N paragraphs backward' },
  { mode = 'Normal', lhs = '|', desc = 'Cursor to column N' },
  { mode = 'Normal', lhs = '}', desc = 'Cursor N paragraphs forward' },
  { mode = 'Normal', lhs = '~', desc = 'Switch case of N characters and move cursor right' },
  { mode = 'Normal', lhs = '<C-End>', desc = 'Same as "G"' },
  { mode = 'Normal', lhs = '<C-Home>', desc = 'Same as "gg"' },
  { mode = 'Normal', lhs = '<C-Left>', desc = 'Same as "b"' },
  { mode = 'Normal', lhs = '<C-Right>', desc = 'Same as "w"' },
  { mode = 'Normal', lhs = '<C-Tab>', desc = 'Same as "g<Tab>"' },
  { mode = 'Normal', lhs = '<Del>', desc = 'Same as "x"' },
  { mode = 'Normal', lhs = '<Down>', desc = 'Same as "j"' },
  { mode = 'Normal', lhs = '<End>', desc = 'Same as "$"' },
  { mode = 'Normal', lhs = '<F1>', desc = 'Same as <Help>' },
  { mode = 'Normal', lhs = '<Help>', desc = 'Open a help window' },
  { mode = 'Normal', lhs = '<Home>', desc = 'Same as "0"' },
  { mode = 'Normal', lhs = '<Insert>', desc = 'Same as "i"' },
  { mode = 'Normal', lhs = '<Left>', desc = 'Same as "h"' },
  { mode = 'Normal', lhs = '<LeftMouse>', desc = 'Move cursor to the mouse click position' },
  { mode = 'Normal', lhs = '<MiddleMouse>', desc = 'Same as "gP" at the mouse click position' },
  { mode = 'Normal', lhs = '<PageDown>', desc = 'Same as CTRL-F' },
  { mode = 'Normal', lhs = '<PageUp>', desc = 'Same as CTRL-B' },
  { mode = 'Normal', lhs = '<Right>', desc = 'Same as "l"' },
  { mode = 'Normal', lhs = '<RightMouse>', desc = 'Start visual mode, move cursor to the mouse click position' },
  { mode = 'Normal', lhs = '<S-Down>', desc = 'Same as CTRL-F' },
  { mode = 'Normal', lhs = '<S-Left>', desc = 'Same as "b"' },
  { mode = 'Normal', lhs = '<S-LeftMouse>', desc = 'Same as "*" at the mouse click position' },
  { mode = 'Normal', lhs = '<S-Right>', desc = 'Same as "w"' },
  { mode = 'Normal', lhs = '<S-RightMouse>', desc = 'Same as "#" at the mouse click position' },
  { mode = 'Normal', lhs = '<S-Up>', desc = 'Same as CTRL-B' },
  { mode = 'Normal', lhs = '<ScrollWheelDown>', desc = 'Move window three lines down' },
  { mode = 'Normal', lhs = '<S-ScrollWheelDown>', desc = 'Move window one page down' },
  { mode = 'Normal', lhs = '<ScrollWheelUp>', desc = 'Move window three lines up' },
  { mode = 'Normal', lhs = '<S-ScrollWheelUp>', desc = 'Move window one page up' },
  { mode = 'Normal', lhs = '<ScrollWheelLeft>', desc = 'Move window six columns left' },
  { mode = 'Normal', lhs = '<S-ScrollWheelLeft>', desc = 'Move window one page left' },
  { mode = 'Normal', lhs = '<ScrollWheelRight>', desc = 'Move window six columns right' },
  { mode = 'Normal', lhs = '<S-ScrollWheelRight>', desc = 'Move window one page right' },
  -- Text objects
  { mode = 'Visual | Operator Pending', lhs = 'a"', desc = 'Select a double quoted string' },
  { mode = 'Visual | Operator Pending', lhs = "a'", desc = 'Select a single quoted string' },
  { mode = 'Visual | Operator Pending', lhs = 'a(', desc = 'Select a block from "([" to "])"' },
  { mode = 'Visual | Operator Pending', lhs = 'a)', desc = 'Same as ab' },
  { mode = 'Visual | Operator Pending', lhs = 'a<', desc = 'Select text between matching <>' },
  { mode = 'Visual | Operator Pending', lhs = 'a>', desc = 'Same as a<' },
  { mode = 'Visual | Operator Pending', lhs = 'aB', desc = 'Select a block from [{ to ]} (with brackets)' },
  { mode = 'Visual | Operator Pending', lhs = 'aW', desc = 'Select a WORD (with white space)' },
  { mode = 'Visual | Operator Pending', lhs = 'a[', desc = 'Select text between matching []' },
  { mode = 'Visual | Operator Pending', lhs = 'a]', desc = 'Same as a[' },
  { mode = 'Visual | Operator Pending', lhs = 'a`', desc = 'Select a string in backticks' },
  { mode = 'Visual | Operator Pending', lhs = 'ab', desc = 'Select a block from [( to ]) (with braces)' },
  { mode = 'Visual | Operator Pending', lhs = 'ap', desc = 'Select a paragraph (with white space)' },
  { mode = 'Visual | Operator Pending', lhs = 'as', desc = 'Select a sentence (with white space)' },
  { mode = 'Visual | Operator Pending', lhs = 'at', desc = 'Select a tag block (with white space)' },
  { mode = 'Visual | Operator Pending', lhs = 'aw', desc = 'Select a word (with white space)' },
  { mode = 'Visual | Operator Pending', lhs = 'a{', desc = 'Same as aB' },
  { mode = 'Visual | Operator Pending', lhs = 'a}', desc = 'Same as aB' },
  { mode = 'Visual | Operator Pending', lhs = 'i"', desc = 'Select inner double quoted string (without quotes)' },
  { mode = 'Visual | Operator Pending', lhs = "i'", desc = 'Select inner single quoted string (without quotes)' },
  { mode = 'Visual | Operator Pending', lhs = 'i(', desc = 'Select inner block (same as ib)' },
  { mode = 'Visual | Operator Pending', lhs = 'i)', desc = 'Same as ib' },
  { mode = 'Visual | Operator Pending', lhs = 'i<', desc = 'Select inner text between matching <>' },
  { mode = 'Visual | Operator Pending', lhs = 'i>', desc = 'Same as i<' },
  { mode = 'Visual | Operator Pending', lhs = 'iB', desc = 'Select inner block from [{ to ]}' },
  { mode = 'Visual | Operator Pending', lhs = 'iW', desc = 'Select inner WORD' },
  { mode = 'Visual | Operator Pending', lhs = 'i[', desc = 'Select inner text between matching []' },
  { mode = 'Visual | Operator Pending', lhs = 'i]', desc = 'Same as i[' },
  { mode = 'Visual | Operator Pending', lhs = 'i`', desc = 'Select inner string in backticks without the backticks' },
  { mode = 'Visual | Operator Pending', lhs = 'ib', desc = 'Select inner block from [( to ])' },
  { mode = 'Visual | Operator Pending', lhs = 'ip', desc = 'Select inner paragraph' },
  { mode = 'Visual | Operator Pending', lhs = 'is', desc = 'Select inner sentence' },
  { mode = 'Visual | Operator Pending', lhs = 'it', desc = 'Select inner tag block' },
  { mode = 'Visual | Operator Pending', lhs = 'iw', desc = 'Select inner word' },
  { mode = 'Visual | Operator Pending', lhs = 'i{', desc = 'Same as iB' },
  { mode = 'Visual | Operator Pending', lhs = 'i}', desc = 'Same as iB' },
  -- Window commands 
  { mode = 'Normal', lhs = '<C-W><C-B>', desc = 'Same as "<C-W> b"' },
  { mode = 'Normal', lhs = '<C-W><C-C>', desc = 'Same as "<C-W> c"' },
  { mode = 'Normal', lhs = '<C-W><C-D>', desc = 'Same as "<C-W> d"' },
  { mode = 'Normal', lhs = '<C-W><C-F>', desc = 'Same as "<C-W> f"' },
  { mode = 'Normal', lhs = '<C-W><C-G>', desc = 'Same as "<C-W> g .."' },
  { mode = 'Normal', lhs = '<C-W><C-H>', desc = 'Same as "<C-W> h"' },
  { mode = 'Normal', lhs = '<C-W><C-I>', desc = 'Same as "<C-W> i"' },
  { mode = 'Normal', lhs = '<C-W><C-J>', desc = 'Same as "<C-W> j"' },
  { mode = 'Normal', lhs = '<C-W><C-K>', desc = 'Same as "<C-W> k"' },
  { mode = 'Normal', lhs = '<C-W><C-L>', desc = 'Same as "<C-W> l"' },
  { mode = 'Normal', lhs = '<C-W><C-N>', desc = 'Same as "<C-W> n"' },
  { mode = 'Normal', lhs = '<C-W><C-O>', desc = 'Same as "<C-W> o"' },
  { mode = 'Normal', lhs = '<C-W><C-P>', desc = 'Same as "<C-W> p"' },
  { mode = 'Normal', lhs = '<C-W><C-Q>', desc = 'Same as "<C-W> q"' },
  { mode = 'Normal', lhs = '<C-W><C-R>', desc = 'Same as "<C-W> r"' },
  { mode = 'Normal', lhs = '<C-W><C-S>', desc = 'Same as "<C-W> s"' },
  { mode = 'Normal', lhs = '<C-W><C-T>', desc = 'Same as "<C-W> t"' },
  { mode = 'Normal', lhs = '<C-W><C-V>', desc = 'Same as "<C-W> v"' },
  { mode = 'Normal', lhs = '<C-W><C-W>', desc = 'Same as "<C-W> w"' },
  { mode = 'Normal', lhs = '<C-W><C-X>', desc = 'Same as "<C-W> x"' },
  { mode = 'Normal', lhs = '<C-W><C-Z>', desc = 'Same as "<C-W> z"' },
  { mode = 'Normal', lhs = '<C-W><C-]>', desc = 'Same as "<C-W> ]"' },
  { mode = 'Normal', lhs = '<C-W><C-^>', desc = 'Same as "<C-W> ^"' },
  { mode = 'Normal', lhs = '<C-W><C-_>', desc = 'Same as "<C-W> _"' },
  { mode = 'Normal', lhs = '<C-W>+', desc = 'Increase window height by N lines' },
  { mode = 'Normal', lhs = '<C-W>-', desc = 'Decrease window height by N lines' },
  { mode = 'Normal', lhs = '<C-W><', desc = 'Decrease window width by N columns' },
  { mode = 'Normal', lhs = '<C-W>=', desc = 'Make all windows the same height & width' },
  { mode = 'Normal', lhs = '<C-W>>', desc = 'Increase window width by N columns' },
  { mode = 'Normal', lhs = '<C-W>H', desc = 'Move window to the far left' },
  { mode = 'Normal', lhs = '<C-W>J', desc = 'Move window to the very bottom' },
  { mode = 'Normal', lhs = '<C-W>K', desc = 'Move window to the very top' },
  { mode = 'Normal', lhs = '<C-W>L', desc = 'Move window to the far right' },
  { mode = 'Normal', lhs = '<C-W>P', desc = 'Go to preview window' },
  { mode = 'Normal', lhs = '<C-W>R', desc = 'Rotate windows upwards N times' },
  { mode = 'Normal', lhs = '<C-W>S', desc = 'Same as "<C-W> s"' },
  { mode = 'Normal', lhs = '<C-W>T', desc = 'Move window to a new tab page' },
  { mode = 'Normal', lhs = '<C-W>W', desc = 'Go to N previous window (wrap around)' },
  { mode = 'Normal', lhs = '<C-W>]', desc = 'Split window and jump to tag under cursor' },
  { mode = 'Normal', lhs = '<C-W>^', desc = 'Split window and edit alternate file N' },
  { mode = 'Normal', lhs = '<C-W>_', desc = 'Set current window height to N (default: very high)' },
  { mode = 'Normal', lhs = '<C-W>b', desc = 'Go to bottom window' },
  { mode = 'Normal', lhs = '<C-W>c', desc = 'Close current window' },
  { mode = 'Normal', lhs = '<C-W>d', desc = 'Split window and jump to definition under cursor' },
  { mode = 'Normal', lhs = '<C-W>f', desc = 'Split window and edit file name under cursor' },
  { mode = 'Normal', lhs = '<C-W>F', desc = 'Split window and edit file name and jump to line number' },
  { mode = 'Normal', lhs = '<C-W>g<C-]>', desc = 'Split window and perform :tjump to tag under cursor' },
  { mode = 'Normal', lhs = '<C-W>g]', desc = 'Split window and perform :tselect for tag under cursor' },
  { mode = 'Normal', lhs = '<C-W>g}', desc = 'Perform :ptjump to tag under cursor' },
  { mode = 'Normal', lhs = '<C-W>gf', desc = 'Edit file name under cursor in new tab' },
  { mode = 'Normal', lhs = '<C-W>gF', desc = 'Edit file name in new tab and jump to line number' },
  { mode = 'Normal', lhs = '<C-W>gt', desc = 'Same as "gt": Go to next tab page' },
  { mode = 'Normal', lhs = '<C-W>gT', desc = 'Same as "gT": Go to previous tab page' },
  { mode = 'Normal', lhs = '<C-W>g<Tab>', desc = 'Same as "g<Tab>": Go to last accessed tab page' },
  { mode = 'Normal', lhs = '<C-W>h', desc = 'Go to Nth left window (stop at first window)' },
  { mode = 'Normal', lhs = '<C-W>i', desc = 'Split window and jump to declaration of identifier' },
  { mode = 'Normal', lhs = '<C-W>j', desc = 'Go N windows down (stop at last window)' },
  { mode = 'Normal', lhs = '<C-W>k', desc = 'Go N windows up (stop at first window)' },
  { mode = 'Normal', lhs = '<C-W>l', desc = 'Go to Nth right window (stop at last window)' },
  { mode = 'Normal', lhs = '<C-W>n', desc = 'Open new window N lines high' },
  { mode = 'Normal', lhs = '<C-W>o', desc = 'Close all but current window' },
  { mode = 'Normal', lhs = '<C-W>p', desc = 'Go to previous (last accessed) window' },
  { mode = 'Normal', lhs = '<C-W>q', desc = 'Quit current window' },
  { mode = 'Normal', lhs = '<C-W>r', desc = 'Rotate windows downwards N times' },
  { mode = 'Normal', lhs = '<C-W>s', desc = 'Split current window in two parts, N lines high' },
  { mode = 'Normal', lhs = '<C-W>t', desc = 'Go to top window' },
  { mode = 'Normal', lhs = '<C-W>v', desc = 'Split current window vertically, N columns wide' },
  { mode = 'Normal', lhs = '<C-W>w', desc = 'Go to N next window (wrap around)' },
  { mode = 'Normal', lhs = '<C-W>x', desc = 'Exchange current window with window N (default: next window)' },
  { mode = 'Normal', lhs = '<C-W>z', desc = 'Close preview window' },
  { mode = 'Normal', lhs = '<C-W>|', desc = 'Set window width to N columns' },
  { mode = 'Normal', lhs = '<C-W>}', desc = 'Show tag under cursor in preview window' },
  { mode = 'Normal', lhs = '<C-W><Down>', desc = 'Same as "<C-W> j"' },
  { mode = 'Normal', lhs = '<C-W><Up>', desc = 'Same as "<C-W> k"' },
  { mode = 'Normal', lhs = '<C-W><Left>', desc = 'Same as "<C-W> h"' },
  { mode = 'Normal', lhs = '<C-W><Right>', desc = 'Same as "<C-W> l"' },
  -- Square bracket commands
  { mode = 'Normal', lhs = '[<C-D>', desc = 'Jump to first #define in current and included files, matching the word under the cursor, starting from the beginning of the current file' },
  { mode = 'Normal', lhs = '[<C-I>', desc = 'Jump to first line in current and included files that contains the word under the cursor, starting from the beginning of the current file' },
  { mode = 'Normal', lhs = '[#', desc = 'Cursor to N previous unmatched #if, #else, or #ifdef' },
  { mode = 'Normal', lhs = '[\'', desc = 'Cursor to previous lowercase mark, on the first non-blank' },
  { mode = 'Normal', lhs = '[(', desc = 'Cursor N times back to unmatched (' },
  { mode = 'Normal', lhs = '[*', desc = 'Same as "[/"' },
  { mode = 'Normal', lhs = '[`', desc = 'Cursor to previous lowercase mark' },
  { mode = 'Normal', lhs = '[/', desc = 'Cursor to N previous start of a C comment' },
  { mode = 'Normal', lhs = '[D', desc = 'List all #defines in current and included files matching the word under the cursor, starting from the beginning of the current file' },
  { mode = 'Normal', lhs = '[I', desc = 'List all lines in current and included files that contain the word under the cursor, starting from the beginning of the current file' },
  { mode = 'Normal', lhs = '[P', desc = 'Same as "[p"' },
  { mode = 'Normal', lhs = '[[', desc = 'Cursor N sections backward' },
  { mode = 'Normal', lhs = '[]', desc = 'Cursor N SECTIONS backward' },
  { mode = 'Normal', lhs = '[c', desc = 'Cursor N times backwards to start of change' },
  { mode = 'Normal', lhs = '[d', desc = 'Show first #define found in current and included files matching the word under the cursor, starting from the beginning of the current file' },
  { mode = 'Normal', lhs = '[f', desc = 'Same as "gf"' },
  { mode = 'Normal', lhs = '[i', desc = 'Show first line found in current and included files that contains the word under the cursor, starting from the beginning of the current file' },
  { mode = 'Normal', lhs = '[m', desc = 'Cursor N times back to start of member function' },
  { mode = 'Normal', lhs = '[p', desc = 'Like "P", but adjust indent to current line' },
  { mode = 'Normal', lhs = '[s', desc = 'Move to the previous misspelled word' },
  { mode = 'Normal', lhs = '[z', desc = 'Move to the start of open fold' },
  { mode = 'Normal', lhs = '[{', desc = 'Cursor N times back to unmatched {' },
  { mode = 'Normal', lhs = '[<MiddleMouse>', desc = 'Same as "[p"' },
  { mode = 'Normal', lhs = ']<C-D>', desc = 'Jump to first #define in current and included files, matching the word under the cursor, starting from cursor position' },
  { mode = 'Normal', lhs = ']<C-I>', desc = 'Jump to first line in current and included files that contains the word under the cursor, starting from cursor position' },
  { mode = 'Normal', lhs = ']#', desc = 'Cursor to N next unmatched #endif or #else' },
  { mode = 'Normal', lhs = ']\\', desc = 'Cursor to next lowercase mark, on the first non-blank' }, -- have to use two backslashes here to escape the first
  { mode = 'Normal', lhs = '])', desc = 'Cursor N times forward to unmatched )' },
  { mode = 'Normal', lhs = ']*', desc = 'Same as "]/"' },
  { mode = 'Normal', lhs = ']`', desc = 'Cursor to next lowercase mark' },
  { mode = 'Normal', lhs = ']/', desc = 'Cursor to N next end of a C comment' },
  { mode = 'Normal', lhs = ']D', desc = 'List all #defines in current and included files matching the word under the cursor, starting from cursor position' },
  { mode = 'Normal', lhs = ']I', desc = 'List all lines in current and included files that contain the word under the cursor, starting from cursor position' },
  { mode = 'Normal', lhs = ']P', desc = 'Same as "[p"' },
  { mode = 'Normal', lhs = '][', desc = 'Cursor N SECTIONS forward' },
  { mode = 'Normal', lhs = ']]', desc = 'Cursor N sections forward' },
  { mode = 'Normal', lhs = ']c', desc = 'Cursor N times forward to start of change' },
  { mode = 'Normal', lhs = ']d', desc = 'Show first #define found in current and included files matching the word under the cursor, starting from cursor position' },
  { mode = 'Normal', lhs = ']f', desc = 'Same as "gf"' },
  { mode = 'Normal', lhs = ']i', desc = 'Show first line found in current and included files that contains the word under the cursor, starting from cursor position' },
  { mode = 'Normal', lhs = ']m', desc = 'Cursor N times forward to end of member function' },
  { mode = 'Normal', lhs = ']p', desc = 'Like "p", but adjust indent to current line' },
  { mode = 'Normal', lhs = ']s', desc = 'Move to next misspelled word' },
  { mode = 'Normal', lhs = ']z', desc = 'Move to end of open fold' },
  { mode = 'Normal', lhs = ']}', desc = 'Cursor N times forward to unmatched }' },
  { mode = 'Normal', lhs = ']<MiddleMouse>', desc = 'Same as "]p"' },
  -- g commands
  { mode = 'Normal', lhs = 'g<C-G>', desc = 'Show information about current cursor position' },
  { mode = 'Normal', lhs = 'g<C-H>', desc = 'Start Select block mode' },
  { mode = 'Normal', lhs = 'g<C-]>', desc = ':tjump to the tag under the cursor' },
  { mode = 'Normal', lhs = 'g#', desc = 'Like "#", but without using "\\<" and "\\>"' },
  { mode = 'Normal', lhs = 'g$', desc = 'Go to rightmost character of the screen line' },
  { mode = 'Normal', lhs = 'g&', desc = 'Repeat last ":s" on all lines' },
  { mode = 'Normal', lhs = 'g\'', desc = 'Like `\'` but without changing the jumplist' },
  { mode = 'Normal', lhs = 'g`', desc = 'Like "`" but without changing the jumplist' },
  { mode = 'Normal', lhs = 'g*', desc = 'Like "*", but without using "\\<" and "\\>"' },
  { mode = 'Normal', lhs = 'g+', desc = 'Go to newer text state N times' },
  { mode = 'Normal', lhs = 'g,', desc = 'Go to N newer position in change list' },
  { mode = 'Normal', lhs = 'g-', desc = 'Go to older text state N times' },
  { mode = 'Normal', lhs = 'g0', desc = 'Go to leftmost character of the screen line' },
  { mode = 'Normal', lhs = 'g8', desc = 'Print hex value of bytes in UTF-8 character' },
  { mode = 'Normal', lhs = 'g;', desc = 'Go to N older position in change list' },
  { mode = 'Normal', lhs = 'g<', desc = 'Display previous command output' },
  { mode = 'Normal', lhs = 'g?', desc = 'Rot13 encoding operator' },
  { mode = 'Normal', lhs = 'g??', desc = 'Rot13 encode current line' },
  { mode = 'Normal', lhs = 'gD', desc = 'Go to definition of word in current file' },
  { mode = 'Normal', lhs = 'gE', desc = 'Go backwards to the end of the previous WORD' },
  { mode = 'Normal', lhs = 'gH', desc = 'Start Select line mode' },
  { mode = 'Normal', lhs = 'gI', desc = 'Like "I", but always start in column 1' },
  { mode = 'Normal', lhs = 'gJ', desc = 'Join lines without inserting space' },
  { mode = 'Normal', lhs = 'gN', desc = 'Find previous match with last search pattern' },
  { mode = 'Normal', lhs = 'gP', desc = 'Put text before cursor, leave cursor after it' },
  { mode = 'Normal', lhs = 'gQ', desc = 'Switch to "Ex" mode with Vim editing' },
  { mode = 'Normal', lhs = 'gR', desc = 'Enter Virtual Replace mode' },
  { mode = 'Normal', lhs = 'gT', desc = 'Go to previous tab page' },
  { mode = 'Normal', lhs = 'gU{motion}', desc = 'Make text uppercase' },
  { mode = 'Normal', lhs = 'gV', desc = 'Don\'t reselect previous Visual area' },
  { mode = 'Normal', lhs = 'g]', desc = ':tselect on the tag under the cursor' },
  { mode = 'Normal', lhs = 'g^', desc = 'Go to leftmost non-white character of the screen line' },
  { mode = 'Normal', lhs = 'g_', desc = 'Cursor to the last CHAR N - 1 lines lower' },
  { mode = 'Normal', lhs = 'ga', desc = 'Print ASCII value of character under the cursor' },
  { mode = 'Normal', lhs = 'gd', desc = 'Go to definition of word in current function' },
  { mode = 'Normal', lhs = 'ge', desc = 'Go backwards to the end of the previous word' },
  { mode = 'Normal', lhs = 'gf', desc = 'Start editing the file under the cursor' },
  { mode = 'Normal', lhs = 'gF', desc = 'Edit file under cursor and jump to line number' },
  { mode = 'Normal', lhs = 'gg', desc = 'Cursor to line N, default is first line' },
  { mode = 'Normal', lhs = 'gh', desc = 'Start Select mode' },
  { mode = 'Normal', lhs = 'gi', desc = 'Insert after moving to `\'` mark' },
  { mode = 'Normal', lhs = 'gj', desc = 'Move down screen lines when \'wrap\' on' },
  { mode = 'Normal', lhs = 'gk', desc = 'Move up screen lines when \'wrap\' on' },
  { mode = 'Normal', lhs = 'gm', desc = 'Go to character at middle of the screen line' },
  { mode = 'Normal', lhs = 'gM', desc = 'Go to character at middle of the text line' },
  { mode = 'Normal', lhs = 'gn', desc = 'Find next match with last search pattern' },
  { mode = 'Normal', lhs = 'go', desc = 'Go to byte N in the buffer' },
  { mode = 'Normal', lhs = 'gp', desc = 'Put text after cursor, leave cursor after it' },
  { mode = 'Normal', lhs = 'gq{motion}', desc = 'Format Nmove text' },
  { mode = 'Normal', lhs = 'gr{char}', desc = 'Virtual replace N chars with {char}' },
  { mode = 'Normal', lhs = 'gs', desc = 'Go to sleep for N seconds (default 1)' },
  { mode = 'Normal', lhs = 'gt', desc = 'Go to the next tab page' },
  { mode = 'Normal', lhs = 'gu{motion}', desc = 'Make Nmove text lowercase' },
  { mode = 'Normal', lhs = 'gv', desc = 'Reselect the previous Visual area' },
  { mode = 'Normal', lhs = 'gw{motion}', desc = 'Format Nmove text and keep cursor' },
  { mode = 'Normal', lhs = 'gx', desc = 'Execute application for file under cursor' },
  { mode = 'Normal', lhs = 'g@{motion}', desc = 'Call \'operatorfunc\'' },
  { mode = 'Normal', lhs = 'g~{motion}', desc = 'Swap case for Nmove text' },
  { mode = 'Normal', lhs = 'g<Down>', desc = 'Same as "gj"' },
  { mode = 'Normal', lhs = 'g<End>', desc = 'Same as "g$"' },
  { mode = 'Normal', lhs = 'g<Home>', desc = 'Same as "g0"' },
  { mode = 'Normal', lhs = 'g<LeftMouse>', desc = 'Same as <C-LeftMouse>' },
  { mode = 'Normal', lhs = 'g<MiddleMouse>', desc = 'Same as <C-MiddleMouse>' },
  { mode = 'Normal', lhs = 'g<RightMouse>', desc = 'Same as <C-RightMouse>' },
  { mode = 'Normal', lhs = 'g<Tab>', desc = 'Go to last accessed tab page' },
  { mode = 'Normal', lhs = 'g<Up>', desc = 'Same as "gk"' },
  -- z commands
  { mode = 'Normal', lhs = 'z<CR>', desc = 'Redraw, cursor line to top of window, cursor on first non-blank' },
  { mode = 'Normal', lhs = 'z{height}<CR>', desc = 'Redraw, make window {height} lines high' },
  { mode = 'Normal', lhs = 'z+', desc = 'Cursor on line N, otherwise like "z<CR>"' },
  { mode = 'Normal', lhs = 'z-', desc = 'Redraw, cursor line at bottom of window, cursor on first non-blank' },
  { mode = 'Normal', lhs = 'z.', desc = 'Redraw, cursor line to center of window, cursor on first non-blank' },
  { mode = 'Normal', lhs = 'z=', desc = 'Give spelling suggestions' },
  { mode = 'Normal', lhs = 'zA', desc = 'Open or close folds recursively' },
  { mode = 'Normal', lhs = 'zC', desc = 'Close folds recursively' },
  { mode = 'Normal', lhs = 'zD', desc = 'Delete folds recursively' },
  { mode = 'Normal', lhs = 'zE', desc = 'Eliminate all folds' },
  { mode = 'Normal', lhs = 'zF', desc = 'Create a fold for N lines' },
  { mode = 'Normal', lhs = 'zG', desc = 'Temporarily mark word as correctly spelled' },
  { mode = 'Normal', lhs = 'zH', desc = 'Scroll half a screenwidth to the right (when wrap off)' },
  { mode = 'Normal', lhs = 'zL', desc = 'Scroll half a screenwidth to the left (when wrap off)' },
  { mode = 'Normal', lhs = 'zM', desc = 'Set foldlevel to zero' },
  { mode = 'Normal', lhs = 'zN', desc = 'Set foldenable' },
  { mode = 'Normal', lhs = 'zO', desc = 'Open folds recursively' },
  { mode = 'Normal', lhs = 'zR', desc = 'Set foldlevel to the deepest fold' },
  { mode = 'Normal', lhs = 'zW', desc = 'Temporarily mark word as incorrectly spelled' },
  { mode = 'Normal', lhs = 'zX', desc = 'Re-apply foldlevel' },
  { mode = 'Normal', lhs = 'z^', desc = 'Cursor on line N, otherwise like "z-"' },
  { mode = 'Normal', lhs = 'za', desc = 'Open or close fold' },
  { mode = 'Normal', lhs = 'zb', desc = 'Redraw, cursor line at bottom of window' },
  { mode = 'Normal', lhs = 'zc', desc = 'Close a fold' },
  { mode = 'Normal', lhs = 'zd', desc = 'Delete a fold' },
  { mode = 'Normal', lhs = 'ze', desc = 'Scroll horizontally to position the cursor at the right side' },
  { mode = 'Normal', lhs = 'zf{motion}', desc = 'Create a fold for Nmove text' },
  { mode = 'Normal', lhs = 'zg', desc = 'Permanently mark word as correctly spelled' },
  { mode = 'Normal', lhs = 'zh', desc = 'Scroll screen N characters to the right' },
  { mode = 'Normal', lhs = 'zi', desc = 'Toggle foldenable' },
  { mode = 'Normal', lhs = 'zj', desc = 'Move to the start of the next fold' },
  { mode = 'Normal', lhs = 'zk', desc = 'Move to the end of the previous fold' },
  { mode = 'Normal', lhs = 'zl', desc = 'Scroll screen N characters to the left' },
  { mode = 'Normal', lhs = 'zm', desc = 'Subtract one from foldlevel' },
  { mode = 'Normal', lhs = 'zn', desc = 'Reset foldenable' },
  { mode = 'Normal', lhs = 'zo', desc = 'Open fold' },
  { mode = 'Normal', lhs = 'zp', desc = 'Paste in block-mode without trailing spaces' },
  { mode = 'Normal', lhs = 'zP', desc = 'Paste in block-mode without trailing spaces' },
  { mode = 'Normal', lhs = 'zr', desc = 'Add one to foldlevel' },
  { mode = 'Normal', lhs = 'zs', desc = 'Scroll horizontally to position the cursor at the left side' },
  { mode = 'Normal', lhs = 'zt', desc = 'Redraw, cursor line at top of window' },
  { mode = 'Normal', lhs = 'zuw', desc = 'Undo zw (temporarily mark word as incorrect)' },
  { mode = 'Normal', lhs = 'zug', desc = 'Undo zg (permanently mark word as correct)' },
  { mode = 'Normal', lhs = 'zuW', desc = 'Undo zW (temporarily mark word as incorrect)' },
  { mode = 'Normal', lhs = 'zuG', desc = 'Undo zG (permanently mark word as correct)' },
  { mode = 'Normal', lhs = 'zv', desc = 'Open enough folds to view the cursor line' },
  { mode = 'Normal', lhs = 'zw', desc = 'Permanently mark word as incorrectly spelled' },
  { mode = 'Normal', lhs = 'zx', desc = 'Re-apply foldlevel and do "zv"' },
  { mode = 'Normal', lhs = 'zy', desc = 'Yank without trailing spaces' },
  { mode = 'Normal', lhs = 'zz', desc = 'Redraw, cursor line at center of window' },
  { mode = 'Normal', lhs = 'z<Left>', desc = 'Same as "zh"' },
  { mode = 'Normal', lhs = 'z<Right>', desc = 'Same as "zl"' },
  -- operator pending mode
  { mode = 'Operator-pending', lhs = 'v', desc = 'Force operator to work charwise' },
  { mode = 'Operator-pending', lhs = 'V', desc = 'Force operator to work linewise' },
  { mode = 'Operator-pending', lhs = '<C-V>', desc = 'Force operator to work blockwise' },
  -- visual mode
  { mode = 'Visual', lhs = '<C-\\> <C-N>', desc = 'Stop Visual mode' },
  { mode = 'Visual', lhs = '<C-\\> <C-G>', desc = 'Go to Normal mode' },
  { mode = 'Visual', lhs = '<C-A>', desc = 'Add N to number in highlighted text' },
  { mode = 'Visual', lhs = '<C-C>', desc = 'Stop Visual mode' },
  { mode = 'Visual', lhs = '<C-G>', desc = 'Toggle between Visual mode and Select mode' },
  { mode = 'Visual', lhs = '<BS>', desc = 'Delete highlighted area (Select mode)' },
  { mode = 'Visual', lhs = '<C-H>', desc = 'Same as <BS>' },
  { mode = 'Visual', lhs = '<C-O>', desc = 'Switch from Select to Visual mode for one command' },
  { mode = 'Visual', lhs = '<C-V>', desc = 'Make Visual mode blockwise or stop Visual mode' },
  { mode = 'Visual', lhs = '<C-X>', desc = 'Subtract N from number in highlighted text' },
  { mode = 'Visual', lhs = '<Esc>', desc = 'Stop Visual mode' },
  { mode = 'Visual', lhs = '<C-]>', desc = 'Jump to highlighted tag' },
  { mode = 'Visual', lhs = '!', desc = 'Filter highlighted lines through external command' },
  { mode = 'Visual', lhs = ':', desc = 'Start a command-line with highlighted lines as range' },
  { mode = 'Visual', lhs = '<', desc = 'Shift highlighted lines one shiftwidth left' },
  { mode = 'Visual', lhs = '=', desc = 'Filter highlighted lines through external program (equalprg)' },
  { mode = 'Visual', lhs = '>', desc = 'Shift highlighted lines one shiftwidth right' },
  { mode = 'Visual', lhs = 'A', desc = 'Block mode: append same text after highlighted area' },
  { mode = 'Visual', lhs = 'C', desc = 'Delete highlighted lines and start insert' },
  { mode = 'Visual', lhs = 'D', desc = 'Delete highlighted lines' },
  { mode = 'Visual', lhs = 'I', desc = 'Block mode: insert same text before highlighted area' },
  { mode = 'Visual', lhs = 'J', desc = 'Join highlighted lines' },
  { mode = 'Visual', lhs = 'K', desc = 'Run keywordprg on highlighted area' },
  { mode = 'Visual', lhs = 'O', desc = 'Move cursor to other corner of highlighted area' },
  { mode = 'Visual', lhs = 'P', desc = 'Replace highlighted area with register contents' },
  { mode = 'Visual', lhs = 'R', desc = 'Delete highlighted lines and start insert' },
  { mode = 'Visual', lhs = 'S', desc = 'Delete highlighted lines and start insert' },
  { mode = 'Visual', lhs = 'U', desc = 'Make highlighted area uppercase' },
  { mode = 'Visual', lhs = 'V', desc = 'Make Visual mode linewise or stop Visual mode' },
  { mode = 'Visual', lhs = 'X', desc = 'Delete highlighted lines' },
  { mode = 'Visual', lhs = 'Y', desc = 'Yank highlighted lines' },
  { mode = 'Visual', lhs = 'a"', desc = 'Extend highlighted area with double quoted string' },
  { mode = 'Visual', lhs = 'a\'', desc = 'Extend highlighted area with single quoted string' },
  { mode = 'Visual', lhs = 'a(', desc = 'Extend highlighted area with () block' },
  { mode = 'Visual', lhs = 'a<', desc = 'Extend highlighted area with <> block' },
  { mode = 'Visual', lhs = 'aB', desc = 'Extend highlighted area with {} block' },
  { mode = 'Visual', lhs = 'aW', desc = 'Extend highlighted area with a WORD' },
  { mode = 'Visual', lhs = 'a[', desc = 'Extend highlighted area with [] block' },
  { mode = 'Visual', lhs = 'a`', desc = 'Extend highlighted area with backtick quoted string' },
  { mode = 'Visual', lhs = 'ap', desc = 'Extend highlighted area with paragraph' },
  { mode = 'Visual', lhs = 'as', desc = 'Extend highlighted area with sentence' },
  { mode = 'Visual', lhs = 'at', desc = 'Extend highlighted area with tag block' },
  { mode = 'Visual', lhs = 'aw', desc = 'Extend highlighted area with word' },
  { mode = 'Visual', lhs = 'c', desc = 'Delete highlighted area and start insert' },
  { mode = 'Visual', lhs = 'd', desc = 'Delete highlighted area' },
  { mode = 'Visual', lhs = 'g<C-A>', desc = 'Add N to number in highlighted text' },
  { mode = 'Visual', lhs = 'g<C-X>', desc = 'Subtract N from number in highlighted text' },
  { mode = 'Visual', lhs = 'gJ', desc = 'Join highlighted lines without inserting spaces' },
  { mode = 'Visual', lhs = 'gq', desc = 'Format highlighted lines' },
  { mode = 'Visual', lhs = 'gv', desc = 'Exchange current and previous highlighted area' },
  { mode = 'Visual', lhs = 'i"', desc = 'Extend highlighted area with double quoted string (without quotes)' },
  { mode = 'Visual', lhs = 'i\'', desc = 'Extend highlighted area with single quoted string (without quotes)' },
  { mode = 'Visual', lhs = 'i(', desc = 'Extend highlighted area with inner () block' },
  { mode = 'Visual', lhs = 'i<', desc = 'Extend highlighted area with inner <> block' },
  { mode = 'Visual', lhs = 'iB', desc = 'Extend highlighted area with inner {} block' },
  { mode = 'Visual', lhs = 'iW', desc = 'Extend highlighted area with inner WORD' },
  { mode = 'Visual', lhs = 'i[', desc = 'Extend highlighted area with inner [] block' },
  { mode = 'Visual', lhs = 'i`', desc = 'Extend highlighted area with backtick quoted string (without the backticks)' },
  { mode = 'Visual', lhs = 'ip', desc = 'Extend highlighted area with inner paragraph' },
  { mode = 'Visual', lhs = 'is', desc = 'Extend highlighted area with inner sentence' },
  { mode = 'Visual', lhs = 'it', desc = 'Extend highlighted area with inner tag block' },
  { mode = 'Visual', lhs = 'iw', desc = 'Extend highlighted area with inner word' },
  { mode = 'Visual', lhs = 'o', desc = 'Move cursor to other corner of highlighted area' },
  { mode = 'Visual', lhs = 'p', desc = 'Replace highlighted area with register contents' },
  { mode = 'Visual', lhs = 'r', desc = 'Replace highlighted area with a character' },
  { mode = 'Visual', lhs = 's', desc = 'Delete highlighted area and start insert' },
  { mode = 'Visual', lhs = 'u', desc = 'Make highlighted area lowercase' },
  { mode = 'Visual', lhs = 'v', desc = 'Make Visual mode charwise or stop Visual mode' },
  { mode = 'Visual', lhs = 'x', desc = 'Delete highlighted area' },
  { mode = 'Visual', lhs = 'y', desc = 'Yank highlighted area' },
  { mode = 'Visual', lhs = '~', desc = 'Swap case for highlighted area' },
  -- command line editing
  { mode = 'Command-line', lhs = '<C-@>', desc = 'Not used' },
  { mode = 'Command-line', lhs = '<C-A>', desc = 'Do completion on the pattern in front of the cursor and insert all matches' },
  { mode = 'Command-line', lhs = '<C-B>', desc = 'Move cursor to beginning of command-line' },
  { mode = 'Command-line', lhs = '<C-C>', desc = 'Same as <Esc>' },
  { mode = 'Command-line', lhs = '<C-D>', desc = 'List completions that match the pattern in front of the cursor' },
  { mode = 'Command-line', lhs = '<C-E>', desc = 'Move cursor to end of command-line' },
  { mode = 'Command-line', lhs = '<C-F>', desc = 'Default for cedit: Open command-line window' },
  { mode = 'Command-line', lhs = '<C-G>', desc = 'Next match when incsearch is active' },
  { mode = 'Command-line', lhs = '<BS>', desc = 'Delete character in front of the cursor' },
  { mode = 'Command-line', lhs = '<C-H>', desc = 'Same as <BS>' },
  { mode = 'Command-line', lhs = '<Tab>', desc = 'Do completion on the pattern in front of the cursor' },
  { mode = 'Command-line', lhs = '<S-Tab>', desc = 'Same as <C-P>' },
  { mode = 'Command-line', lhs = '<C-I>', desc = 'Same as <Tab>' },
  { mode = 'Command-line', lhs = '<NL>', desc = 'Same as <CR>' },
  { mode = 'Command-line', lhs = '<C-J>', desc = 'Same as <CR>' },
  { mode = 'Command-line', lhs = '<C-K>', desc = 'Enter digraph' },
  { mode = 'Command-line', lhs = '<C-L>', desc = 'Do completion and insert the longest common part' },
  { mode = 'Command-line', lhs = '<CR>', desc = 'Execute entered command' },
  { mode = 'Command-line', lhs = '<C-M>', desc = 'Same as <CR>' },
  { mode = 'Command-line', lhs = '<C-N>', desc = 'Go to next match or recall older command-line' },
  { mode = 'Command-line', lhs = '<C-P>', desc = 'Go to previous match or recall older command-line' },
  { mode = 'Command-line', lhs = '<C-Q>', desc = 'Same as <C-V>, unless used for terminal control flow' },
  { mode = 'Command-line', lhs = '<C-R>', desc = 'Insert contents of a register' },
  { mode = 'Command-line', lhs = '<C-R> <C-R>', desc = 'Insert contents of register literally' },
  { mode = 'Command-line', lhs = '<C-S>', desc = 'Not used, or used for terminal control flow' },
  { mode = 'Command-line', lhs = '<C-T>', desc = 'Previous match when incsearch is active' },
  { mode = 'Command-line', lhs = '<C-U>', desc = 'Remove all characters' },
  { mode = 'Command-line', lhs = '<C-V>', desc = 'Insert next non-digit literally, insert three-digit decimal as a single byte' },
  { mode = 'Command-line', lhs = '<C-W>', desc = 'Delete word in front of the cursor' },
  { mode = 'Command-line', lhs = '<Esc>', desc = 'Abandon command-line without executing' },
  { mode = 'Command-line', lhs = '<C-[>', desc = 'Same as <Esc>' },
  { mode = 'Command-line', lhs = '<C-\\> <C-N>', desc = 'Go to Normal mode and abandon command-line' },
  { mode = 'Command-line', lhs = '<C-\\> <C-G>', desc = 'Go to Normal mode and abandon command-line' },
  { mode = 'Command-line', lhs = '<C-]>', desc = 'Trigger abbreviation' },
  { mode = 'Command-line', lhs = '<C-^>', desc = 'Toggle use of lmap mappings' },
  { mode = 'Command-line', lhs = '<Del>', desc = 'Delete character under cursor' },
  { mode = 'Command-line', lhs = '<Left>', desc = 'Move cursor left' },
  { mode = 'Command-line', lhs = '<S-Left>', desc = 'Move cursor one word left' },
  { mode = 'Command-line', lhs = '<C-Left>', desc = 'Move cursor one word left' },
  { mode = 'Command-line', lhs = '<Right>', desc = 'Move cursor right' },
  { mode = 'Command-line', lhs = '<S-Right>', desc = 'Move cursor one word right' },
  { mode = 'Command-line', lhs = '<C-Right>', desc = 'Move cursor one word right' },
  { mode = 'Command-line', lhs = '<Up>', desc = 'Recall previous command-line from history' },
  { mode = 'Command-line', lhs = '<S-Up>', desc = 'Recall previous command-line from history' },
  { mode = 'Command-line', lhs = '<Down>', desc = 'Recall next command-line from history' },
  { mode = 'Command-line', lhs = '<S-Down>', desc = 'Recall next command-line from history' },
  { mode = 'Command-line', lhs = '<Home>', desc = 'Move cursor to start of command-line' },
  { mode = 'Command-line', lhs = '<End>', desc = 'Move cursor to end of command-line' },
  { mode = 'Command-line', lhs = '<PageDown>', desc = 'Same as <S-Down>' },
  { mode = 'Command-line', lhs = '<PageUp>', desc = 'Same as <S-Up>' },
  { mode = 'Command-line', lhs = '<Insert>', desc = 'Toggle insert/overstrike mode' },
  { mode = 'Command-line', lhs = '<LeftMouse>', desc = 'Move cursor to mouse click' },
  { mode = 'Command-line', lhs = '<C-\\> e', desc = 'Replace command line with result of expression' },
  { mode = 'Wildmenu', lhs = '<Up>', desc = 'Move up to parent' },
  { mode = 'Wildmenu', lhs = '<Down>', desc = 'Move down to submenu' },
  { mode = 'Wildmenu', lhs = '<Left>', desc = 'Select previous match' },
  { mode = 'Wildmenu', lhs = '<Right>', desc = 'Select next match' },
  { mode = 'Wildmenu', lhs = '<CR>', desc = 'Move into submenu for menu completion' },
  { mode = 'Wildmenu', lhs = '<C-E>', desc = 'Stop completion and return to original text' },
  { mode = 'Wildmenu', lhs = '<C-Y>', desc = 'Accept selected match and stop completion' },
  { mode = 'Wildmenu', lhs = 'other', desc = 'Stop completion and insert typed character' },
  { mode = 'Wildmenu (pum)', lhs = '<PageUp>', desc = 'Select match several entries back' },
  { mode = 'Wildmenu (pum)', lhs = '<PageDown>', desc = 'Select match several entries forward' },
  -- Terminal mode
  { mode = 'Terminal', lhs = '<C-\\>', desc = 'Escape sequence, the next key is forwarded unless it\'s <C-N> or <C-O>' },
  { mode = 'Terminal', lhs = '<C-\\> <C-N>', desc = 'Go to Normal mode from Terminal mode' },
  { mode = 'Terminal', lhs = '<C-\\> <C-O>', desc = 'Execute one Normal mode command, then return to Terminal mode' },
  -- Extra commands
  { mode = 'Extra', lhs = ':', desc = 'nothing' },
  { mode = 'Extra', lhs = ':{range}', desc = 'go to last line in {range}' },
  { mode = 'Extra', lhs = ':!', desc = 'filter lines or execute an external command' },
  { mode = 'Extra', lhs = ':!!', desc = 'repeat last ":!" command' },
  { mode = 'Extra', lhs = ':#', desc = 'same as ":number"' },
  { mode = 'Extra', lhs = ':&', desc = 'repeat last ":substitute"' },
  { mode = 'Extra', lhs = ':*', desc = 'use the last Visual area, like ":\'<,\'>"' },
  { mode = 'Extra', lhs = ':<', desc = 'shift lines one "shiftwidth" left' },
  { mode = 'Extra', lhs = ':=', desc = 'print the last line number' },
  { mode = 'Extra', lhs = ':>', desc = 'shift lines one "shiftwidth" right' },
  { mode = 'Extra', lhs = ':@', desc = 'execute contents of a register' },
  { mode = 'Extra', lhs = ':@@', desc = 'repeat the previous ":@"' },
  { mode = 'Extra', lhs = ':2match', desc = 'define a second match to highlight' },
  { mode = 'Extra', lhs = ':3match', desc = 'define a third match to highlight' },
  { mode = 'Extra', lhs = ':N[ext]', desc = 'go to previous file in the argument list' },
  { mode = 'Extra', lhs = ':a[ppend]', desc = 'append text' },
  { mode = 'Extra', lhs = ':ab[breviate]', desc = 'enter abbreviation' },
  { mode = 'Extra', lhs = ':abc[lear]', desc = 'remove all abbreviations' },
  { mode = 'Extra', lhs = ':abo[veleft]', desc = 'make split window appear left or above' },
  { mode = 'Extra', lhs = ':al[l]', desc = 'open a window for each file in the argument list' },
  { mode = 'Extra', lhs = ':am[enu]', desc = 'enter new menu item for all modes' },
  { mode = 'Extra', lhs = ':an[oremenu]', desc = 'enter a new menu for all modes that will not be remapped' },
  { mode = 'Extra', lhs = ':ar[gs]', desc = 'print the argument list' },
  { mode = 'Extra', lhs = ':arga[dd]', desc = 'add items to the argument list' },
  { mode = 'Extra', lhs = ':argded[upe]', desc = 'remove duplicates from the argument list' },
  { mode = 'Extra', lhs = ':argd[elete]', desc = 'delete items from the argument list' },
  { mode = 'Extra', lhs = ':arge[dit]', desc = 'add item to the argument list and edit it' },
  { mode = 'Extra', lhs = ':argdo', desc = 'do a command on all items in the argument list' },
  { mode = 'Extra', lhs = ':argg[lobal]', desc = 'define the global argument list' },
  { mode = 'Extra', lhs = ':argl[ocal]', desc = 'define a local argument list' },
  { mode = 'Extra', lhs = ':argu[ment]', desc = 'go to specific file in the argument list' },
  { mode = 'Extra', lhs = ':as[cii]', desc = 'print ascii value of character under the cursor' },
  { mode = 'Extra', lhs = ':au[tocmd]', desc = 'enter or show autocommands' },
  { mode = 'Extra', lhs = ':aug[roup]', desc = 'select the autocommand group to use' },
  { mode = 'Extra', lhs = ':aun[menu]', desc = 'remove menu for all modes' },
  { mode = 'Extra', lhs = ':b[uffer]', desc = 'go to specific buffer in the buffer list' },
  { mode = 'Extra', lhs = ':bN[ext]', desc = 'go to previous buffer in the buffer list' },
  { mode = 'Extra', lhs = ':ba[ll]', desc = 'open a window for each buffer in the buffer list' },
  { mode = 'Extra', lhs = ':bad[d]', desc = 'add buffer to the buffer list' },
  { mode = 'Extra', lhs = ':balt', desc = 'like ":badd" but also set the alternate file' },
  { mode = 'Extra', lhs = ':bd[elete]', desc = 'remove a buffer from the buffer list' },
  { mode = 'Extra', lhs = ':bel[owright]', desc = 'make split window appear right or below' },
  { mode = 'Extra', lhs = ':bf[irst]', desc = 'go to first buffer in the buffer list' },
  { mode = 'Extra', lhs = ':bl[ast]', desc = 'go to last buffer in the buffer list' },
  { mode = 'Extra', lhs = ':bm[odified]', desc = 'go to next buffer in the buffer list that has been modified' },
  { mode = 'Extra', lhs = ':bn[ext]', desc = 'go to next buffer in the buffer list' },
  { mode = 'Extra', lhs = ':bo[tright]', desc = 'make split window appear at bottom or far right' },
  { mode = 'Extra', lhs = ':bp[revious]', desc = 'go to previous buffer in the buffer list' },
  { mode = 'Extra', lhs = ':br[ewind]', desc = 'go to first buffer in the buffer list' },
  { mode = 'Extra', lhs = ':brea[k]', desc = 'break out of while loop' },
  { mode = 'Extra', lhs = ':breaka[dd]', desc = 'add a debugger breakpoint' },
  { mode = 'Extra', lhs = ':breakd[el]', desc = 'delete a debugger breakpoint' },
  { mode = 'Extra', lhs = ':breakl[ist]', desc = 'list debugger breakpoints' },
  { mode = 'Extra', lhs = ':bro[wse]', desc = 'use file selection dialog' },
  { mode = 'Extra', lhs = ':bufdo', desc = 'execute command in each listed buffer' },
  { mode = 'Extra', lhs = ':buffers', desc = 'list all files in the buffer list' },
  { mode = 'Extra', lhs = ':bun[load]', desc = 'unload a specific buffer' },
  { mode = 'Extra', lhs = ':bw[ipeout]', desc = 'really delete a buffer' },
  { mode = 'Extra', lhs = ':c[hange]', desc = 'replace a line or series of lines' },
  { mode = 'Extra', lhs = ':cN[ext]', desc = 'go to previous error' },
  { mode = 'Extra', lhs = ':cNf[ile]', desc = 'go to last error in previous file' },
  { mode = 'Extra', lhs = ':ca[bbrev]', desc = 'like ":abbreviate" but for Command-line mode' },
  { mode = 'Extra', lhs = ':cabc[lear]', desc = 'clear all abbreviations for Command-line mode' },
  { mode = 'Extra', lhs = ':cabo[ve]', desc = 'go to error above current line' },
  { mode = 'Extra', lhs = ':cad[dbuffer]', desc = 'add errors from buffer' },
  { mode = 'Extra', lhs = ':cadde[xpr]', desc = 'add errors from expr' },
  { mode = 'Extra', lhs = ':caddf[ile]', desc = 'add error message to current quickfix list' },
  { mode = 'Extra', lhs = ':caf[ter]', desc = 'go to error after current cursor' },
  { mode = 'Extra', lhs = ':cal[l]', desc = 'call a function' },
  { mode = 'Extra', lhs = ':cat[ch]', desc = 'part of a :try command' },
  { mode = 'Extra', lhs = ':cbef[ore]', desc = 'go to error before current cursor' },
  { mode = 'Extra', lhs = ':cbel[ow]', desc = 'go to error below current line' },
  { mode = 'Extra', lhs = ':cbo[ttom]', desc = 'scroll to the bottom of the quickfix window' },
  { mode = 'Extra', lhs = ':cb[uffer]', desc = 'parse error messages and jump to first error' },
  { mode = 'Extra', lhs = ':cc', desc = 'go to specific error' },
  { mode = 'Extra', lhs = ':ccl[ose]', desc = 'close quickfix window' },
  { mode = 'Extra', lhs = ':cd', desc = 'change directory' },
  { mode = 'Extra', lhs = ':cdo', desc = 'execute command in each valid error list entry' },
  { mode = 'Extra', lhs = ':cfd[o]', desc = 'execute command in each file in error list' },
  { mode = 'Extra', lhs = ':ce[nter]', desc = 'format lines at the center' },
  { mode = 'Extra', lhs = ':cex[pr]', desc = 'read errors from expr and jump to first' },
  { mode = 'Extra', lhs = ':cf[ile]', desc = 'read file with error messages and jump to first' },
  { mode = 'Extra', lhs = ':cfir[st]', desc = 'go to the specified error, default first one' },
  { mode = 'Extra', lhs = ':cgetb[uffer]', desc = 'get errors from buffer' },
  { mode = 'Extra', lhs = ':cgete[xpr]', desc = 'get errors from expr' },
  { mode = 'Extra', lhs = ':cg[etfile]', desc = 'read file with error messages' },
  { mode = 'Extra', lhs = ':changes', desc = 'print the change list' },
  { mode = 'Extra', lhs = ':chd[ir]', desc = 'change directory' },
  { mode = 'Extra', lhs = ':che[ckhealth]', desc = 'run healthchecks' },
  { mode = 'Extra', lhs = ':checkp[ath]', desc = 'list included files' },
  { mode = 'Extra', lhs = ':checkt[ime]', desc = 'check timestamp of loaded buffers' },
  { mode = 'Extra', lhs = ':chi[story]', desc = 'list the error lists' },
  { mode = 'Extra', lhs = ':cla[st]', desc = 'go to the specified error, default last one' },
  { mode = 'Extra', lhs = ':cle[arjumps]', desc = 'clear the jump list' },
  { mode = 'Extra', lhs = ':cl[ist]', desc = 'list all errors' },
  { mode = 'Extra', lhs = ':clo[se]', desc = 'close current window' },
  { mode = 'Extra', lhs = ':cm[ap]', desc = 'like ":map" but for Command-line mode' },
  { mode = 'Extra', lhs = ':cmapc[lear]', desc = 'clear all mappings for Command-line mode' },
  { mode = 'Extra', lhs = ':cme[nu]', desc = 'add menu for Command-line mode' },
  { mode = 'Extra', lhs = ':cn[ext]', desc = 'go to next error' },
  { mode = 'Extra', lhs = ':cnew[er]', desc = 'go to newer error list' },
  { mode = 'Extra', lhs = ':cnf[ile]', desc = 'go to first error in next file' },
  { mode = 'Extra', lhs = ':cno[remap]', desc = 'like ":noremap" but for Command-line mode' },
  { mode = 'Extra', lhs = ':cnorea[bbrev]', desc = 'like ":noreabbrev" but for Command-line mode' },
  { mode = 'Extra', lhs = ':cnoreme[nu]', desc = 'like ":noremenu" but for Command-line mode' },
  { mode = 'Extra', lhs = ':co[py]', desc = 'copy lines' },
  { mode = 'Extra', lhs = ':col[der]', desc = 'go to older error list' },
  { mode = 'Extra', lhs = ':colo[rscheme]', desc = 'load a specific color scheme' },
  { mode = 'Extra', lhs = ':com[mand]', desc = 'create user-defined command' },
  { mode = 'Extra', lhs = ':comc[lear]', desc = 'clear all user-defined commands' },
  { mode = 'Extra', lhs = ':comp[iler]', desc = 'do settings for a specific compiler' },
  { mode = 'Extra', lhs = ':con[tinue]', desc = 'go back to :while' },
  { mode = 'Extra', lhs = ':conf[irm]', desc = 'prompt user when confirmation required' },
  { mode = 'Extra', lhs = ':cons[t]', desc = 'create a variable as a constant' },
  { mode = 'Extra', lhs = ':cope[n]', desc = 'open quickfix window' },
  { mode = 'Extra', lhs = ':cp[revious]', desc = 'go to previous error' },
  { mode = 'Extra', lhs = ':cpf[ile]', desc = 'go to last error in previous file' },
  { mode = 'Extra', lhs = ':cq[uit]', desc = 'quit Vim with an error code' },
  { mode = 'Extra', lhs = ':cr[ewind]', desc = 'go to the specified error, default first one' },
  { mode = 'Extra', lhs = ':cu[nmap]', desc = 'like ":unmap" but for Command-line mode' },
  { mode = 'Extra', lhs = ':cuna[bbrev]', desc = 'like ":unabbrev" but for Command-line mode' },
  { mode = 'Extra', lhs = ':cunme[nu]', desc = 'remove menu for Command-line mode' },
  { mode = 'Extra', lhs = ':cw[indow]', desc = 'open or close quickfix window' },
  { mode = 'Extra', lhs = ':d[elete]', desc = 'delete lines' },
  { mode = 'Extra', lhs = ':deb[ug]', desc = 'run a command in debugging mode' },
  { mode = 'Extra', lhs = ':debugg[reedy]', desc = 'read debug mode commands from normal input' },
  { mode = 'Extra', lhs = ':delc[ommand]', desc = 'delete user-defined command' },
  { mode = 'Extra', lhs = ':delf[unction]', desc = 'delete a user function' },
  { mode = 'Extra', lhs = ':delm[arks]', desc = 'delete marks' },
  { mode = 'Extra', lhs = ':dif[fupdate]', desc = 'update diff buffers' },
  { mode = 'Extra', lhs = ':diffg[et]', desc = 'remove differences in current buffer' },
  { mode = 'Extra', lhs = ':diffo[ff]', desc = 'switch off diff mode' },
  { mode = 'Extra', lhs = ':diffp[atch]', desc = 'apply a patch and show differences' },
  { mode = 'Extra', lhs = ':diffpu[t]', desc = 'remove differences in other buffer' },
  { mode = 'Extra', lhs = ':diffs[plit]', desc = 'show differences with another file' },
  { mode = 'Extra', lhs = ':diffthis', desc = 'make current window a diff window' },
  { mode = 'Extra', lhs = ':dig[raphs]', desc = 'show or enter digraphs' },
  { mode = 'Extra', lhs = ':di[splay]', desc = 'display registers' },
  { mode = 'Extra', lhs = ':dj[ump]', desc = 'jump to #define' },
  { mode = 'Extra', lhs = ':dl', desc = 'short for delete with the l flag' },
  { mode = 'Extra', lhs = ':dli[st]', desc = 'list #defines' },
  { mode = 'Extra', lhs = ':do[autocmd]', desc = 'apply autocommands to current buffer' },
  { mode = 'Extra', lhs = ':doautoa[ll]', desc = 'apply autocommands for all loaded buffers' },
  { mode = 'Extra', lhs = ':d[elete]p', desc = 'short for delete with the p flag' },
  { mode = 'Extra', lhs = ':dr[op]', desc = 'jump to window editing file or edit file in current window' },
  { mode = 'Extra', lhs = ':ds[earch]', desc = 'list one #define' },
  { mode = 'Extra', lhs = ':dsp[lit]', desc = 'split window and jump to #define' },
  { mode = 'Extra', lhs = ':e[dit]', desc = 'edit a file' },
  { mode = 'Extra', lhs = ':ea[rlier]', desc = 'go to older change, undo' },
  { mode = 'Extra', lhs = ':ec[ho]', desc = 'echoes the result of expressions' },
  { mode = 'Extra', lhs = ':echoe[rr]', desc = 'like :echo, show like an error and use history' },
  { mode = 'Extra', lhs = ':echoh[l]', desc = 'set highlighting for echo commands' },
  { mode = 'Extra', lhs = ':echom[sg]', desc = 'same as :echo, put message in history' },
  { mode = 'Extra', lhs = ':echon', desc = 'same as :echo, but without <EOL>' },
  { mode = 'Extra', lhs = ':el[se]', desc = 'part of an :if command' },
  { mode = 'Extra', lhs = ':elsei[f]', desc = 'part of an :if command' },
  { mode = 'Extra', lhs = ':em[enu]', desc = 'execute a menu by name' },
  { mode = 'Extra', lhs = ':en[dif]', desc = 'end previous :if' },
  { mode = 'Extra', lhs = ':endfo[r]', desc = 'end previous :for' },
  { mode = 'Extra', lhs = ':endf[unction]', desc = 'end of a user function started with :function' },
  { mode = 'Extra', lhs = ':endt[ry]', desc = 'end previous :try' },
  { mode = 'Extra', lhs = ':endw[hile]', desc = 'end previous :while' },
  { mode = 'Extra', lhs = ':ene[w]', desc = 'edit a new, unnamed buffer' },
  { mode = 'Extra', lhs = ':ev[al]', desc = 'evaluate an expression and discard the result' },
  { mode = 'Extra', lhs = ':ex', desc = 'same as ":edit"' },
  { mode = 'Extra', lhs = ':exe[cute]', desc = 'execute result of expressions' },
  { mode = 'Extra', lhs = ':exi[t]', desc = 'same as ":xit"' },
  { mode = 'Extra', lhs = ':exu[sage]', desc = 'overview of Ex commands' },
  { mode = 'Extra', lhs = ':fc[lose]', desc = 'close floating window' },
  { mode = 'Extra', lhs = ':f[ile]', desc = 'show or set the current file name' },
  { mode = 'Extra', lhs = ':files', desc = 'list all files in the buffer list' },
  { mode = 'Extra', lhs = ':filet[ype]', desc = 'switch file type detection on/off' },
  { mode = 'Extra', lhs = ':filt[er]', desc = 'filter output of following command' },
  { mode = 'Extra', lhs = ':fin[d]', desc = 'find file in path and edit it' },
  { mode = 'Extra', lhs = ':fina[lly]', desc = 'part of a :try command' },
  { mode = 'Extra', lhs = ':fini[sh]', desc = 'quit sourcing a Vim script' },
  { mode = 'Extra', lhs = ':fir[st]', desc = 'go to the first file in the argument list' },
  { mode = 'Extra', lhs = ':fo[ld]', desc = 'create a fold' },
  { mode = 'Extra', lhs = ':foldc[lose]', desc = 'close folds' },
  { mode = 'Extra', lhs = ':foldd[oopen]', desc = 'execute command on lines not in a closed fold' },
  { mode = 'Extra', lhs = ':folddoc[losed]', desc = 'execute command on lines in a closed fold' },
  { mode = 'Extra', lhs = ':foldo[pen]', desc = 'open folds' },
  { mode = 'Extra', lhs = ':for', desc = 'for loop' },
  { mode = 'Extra', lhs = ':fu[nction]', desc = 'define a user function' },
  { mode = 'Extra', lhs = ':g[lobal]', desc = 'execute commands for matching lines' },
  { mode = 'Extra', lhs = ':go[to]', desc = 'go to byte in the buffer' },
  { mode = 'Extra', lhs = ':gr[ep]', desc = 'run grepprg and jump to first match' },
  { mode = 'Extra', lhs = ':grepa[dd]', desc = 'like :grep, but append to current list' },
  { mode = 'Extra', lhs = ':gu[i]', desc = 'start the GUI' },
  { mode = 'Extra', lhs = ':gv[im]', desc = 'start the GUI' },
  { mode = 'Extra', lhs = ':h[elp]', desc = 'open a help window' },
  { mode = 'Extra', lhs = ':helpc[lose]', desc = 'close one help window' },
  { mode = 'Extra', lhs = ':helpg[rep]', desc = 'like ":grep" but searches help files' },
  { mode = 'Extra', lhs = ':helpt[ags]', desc = 'generate help tags for a directory' },
  { mode = 'Extra', lhs = ':hi[ghlight]', desc = 'specify highlighting methods' },
  { mode = 'Extra', lhs = ':hid[e]', desc = 'hide current buffer for a command' },
  { mode = 'Extra', lhs = ':his[tory]', desc = 'print a history list' },
  { mode = 'Extra', lhs = ':hor[izontal]', desc = 'following window command work horizontally' },
  { mode = 'Extra', lhs = ':i[nsert]', desc = 'insert text' },
  { mode = 'Extra', lhs = ':ia[bbrev]', desc = 'like ":abbrev" but for Insert mode' },
  { mode = 'Extra', lhs = ':iabc[lear]', desc = 'like ":abclear" but for Insert mode' },
  { mode = 'Extra', lhs = ':if', desc = 'execute commands when condition met' },
  { mode = 'Extra', lhs = ':ij[ump]', desc = 'jump to definition of identifier' },
  { mode = 'Extra', lhs = ':il[ist]', desc = 'list lines where identifier matches' },
  { mode = 'Extra', lhs = ':im[ap]', desc = 'like ":map" but for Insert mode' },
  { mode = 'Extra', lhs = ':imapc[lear]', desc = 'like ":mapclear" but for Insert mode' },
  { mode = 'Extra', lhs = ':ime[nu]', desc = 'add menu for Insert mode' },
  { mode = 'Extra', lhs = ':ino[remap]', desc = 'like ":noremap" but for Insert mode' },
  { mode = 'Extra', lhs = ':inorea[bbrev]', desc = 'like ":noreabbrev" but for Insert mode' },
  { mode = 'Extra', lhs = ':inoreme[nu]', desc = 'like ":noremenu" but for Insert mode' },
  { mode = 'Extra', lhs = ':int[ro]', desc = 'print the introductory message' },
  { mode = 'Extra', lhs = ':is[earch]', desc = 'list one line where identifier matches' },
  { mode = 'Extra', lhs = ':isp[lit]', desc = 'split window and jump to definition of identifier' },
  { mode = 'Extra', lhs = ':iu[nmap]', desc = 'like ":unmap" but for Insert mode' },
  { mode = 'Extra', lhs = ':iuna[bbrev]', desc = 'like ":unabbrev" but for Insert mode' },
  { mode = 'Extra', lhs = ':iunme[nu]', desc = 'remove menu for Insert mode' },
  { mode = 'Extra', lhs = ':j[oin]', desc = 'join lines' },
  { mode = 'Extra', lhs = ':ju[mps]', desc = 'print the jump list' },
  { mode = 'Extra', lhs = ':k', desc = 'set a mark' },
  { mode = 'Extra', lhs = ':keepa[lt]', desc = 'following command keeps the alternate file' },
  { mode = 'Extra', lhs = ':kee[pmarks]', desc = 'following command keeps marks where they are' },
  { mode = 'Extra', lhs = ':keepj[umps]', desc = 'following command keeps jumplist and marks' },
  { mode = 'Extra', lhs = ':keepp[atterns]', desc = 'following command keeps search pattern history' },
  { mode = 'Extra', lhs = ':lN[ext]', desc = 'go to previous entry in location list' },
  { mode = 'Extra', lhs = ':lNf[ile]', desc = 'go to last entry in previous file' },
  { mode = 'Extra', lhs = ':l[ist]', desc = 'print lines' },
  { mode = 'Extra', lhs = ':lab[ove]', desc = 'go to location above current line' },
  { mode = 'Extra', lhs = ':lad[dexpr]', desc = 'add locations from expr' },
  { mode = 'Extra', lhs = ':laddb[uffer]', desc = 'add locations from buffer' },
  { mode = 'Extra', lhs = ':laddf[ile]', desc = 'add locations to current location list' },
  { mode = 'Extra', lhs = ':laf[ter]', desc = 'go to location after current cursor' },
  { mode = 'Extra', lhs = ':la[st]', desc = 'go to the last file in the argument list' },
  { mode = 'Extra', lhs = ':lan[guage]', desc = 'set the language (locale)' },
  { mode = 'Extra', lhs = ':lat[er]', desc = 'go to newer change, redo' },
  { mode = 'Extra', lhs = ':lbef[ore]', desc = 'go to location before current cursor' },
  { mode = 'Extra', lhs = ':lbel[ow]', desc = 'go to location below current line' },
  { mode = 'Extra', lhs = ':lbo[ttom]', desc = 'scroll to the bottom of the location window' },
  { mode = 'Extra', lhs = ':lb[uffer]', desc = 'parse locations and jump to first location' },
  { mode = 'Extra', lhs = ':lc[d]', desc = 'change directory locally' },
  { mode = 'Extra', lhs = ':lch[dir]', desc = 'change directory locally' },
  { mode = 'Extra', lhs = ':lcl[ose]', desc = 'close location window' },
  { mode = 'Extra', lhs = ':ld[o]', desc = 'execute command in valid location list entries' },
  { mode = 'Extra', lhs = ':lfd[o]', desc = 'execute command in each file in location list' },
  { mode = 'Extra', lhs = ':le[ft]', desc = 'left align lines' },
  { mode = 'Extra', lhs = ':lefta[bove]', desc = 'make split window appear left or above' },
  { mode = 'Extra', lhs = ':let', desc = 'assign a value to a variable or option' },
  { mode = 'Extra', lhs = ':lex[pr]', desc = 'read locations from expr and jump to first' },
  { mode = 'Extra', lhs = ':lf[ile]', desc = 'read file with locations and jump to first' },
  { mode = 'Extra', lhs = ':lfir[st]', desc = 'go to the specified location, default first one' },
  { mode = 'Extra', lhs = ':lgetb[uffer]', desc = 'get locations from buffer' },
  { mode = 'Extra', lhs = ':lgete[xpr]', desc = 'get locations from expr' },
  { mode = 'Extra', lhs = ':lg[etfile]', desc = 'read file with locations' },
  { mode = 'Extra', lhs = ':lgr[ep]', desc = 'run grepprg and jump to first match' },
  { mode = 'Extra', lhs = ':lgrepa[dd]', desc = 'like :grep, but append to current list' },
  { mode = 'Extra', lhs = ':lh[elpgrep]', desc = 'like :helpgrep but uses location list' },
  { mode = 'Extra', lhs = ':lhi[story]', desc = 'list the location lists' },
  { mode = 'Extra', lhs = ':ll', desc = 'go to specific location' },
  { mode = 'Extra', lhs = ':lla[st]', desc = 'go to the specified location, default last one' },
  { mode = 'Extra', lhs = ':lli[st]', desc = 'list all locations' },
  { mode = 'Extra', lhs = ':lmak[e]', desc = 'execute external command makeprg and parse error messages' },
  { mode = 'Extra', lhs = ':lm[ap]', desc = 'like :map but includes Lang-Arg mode' },
  { mode = 'Extra', lhs = ':lmapc[lear]', desc = 'like :mapclear but includes Lang-Arg mode' },
  { mode = 'Extra', lhs = ':lne[xt]', desc = 'go to next location' },
  { mode = 'Extra', lhs = ':lnew[er]', desc = 'go to newer location list' },
  { mode = 'Extra', lhs = ':lnf[ile]', desc = 'go to first location in next file' },
  { mode = 'Extra', lhs = ':ln[oremap]', desc = 'like :noremap but includes Lang-Arg mode' },
  { mode = 'Extra', lhs = ':loadk[eymap]', desc = 'load the following keymaps until EOF' },
  { mode = 'Extra', lhs = ':lo[adview]', desc = 'load view for current window from a file' },
  { mode = 'Extra', lhs = ':loc[kmarks]', desc = 'following command keeps marks where they are' },
  { mode = 'Extra', lhs = ':lockv[ar]', desc = 'lock variables' },
  { mode = 'Extra', lhs = ':lol[der]', desc = 'go to older location list' },
  { mode = 'Extra', lhs = ':lope[n]', desc = 'open location window' },
  { mode = 'Extra', lhs = ':lp[revious]', desc = 'go to previous location' },
  { mode = 'Extra', lhs = ':lpf[ile]', desc = 'go to last location in previous file' },
  { mode = 'Extra', lhs = ':lr[ewind]', desc = 'go to the specified location, default first one' },
  { mode = 'Extra', lhs = ':ls', desc = 'list all buffers' },
  { mode = 'Extra', lhs = ':lt[ag]', desc = 'jump to tag and add matching tags to the location list' },
  { mode = 'Extra', lhs = ':lu[nmap]', desc = 'like :unmap but includes Lang-Arg mode' },
  { mode = 'Extra', lhs = ':lua', desc = 'execute Lua command' },
  { mode = 'Extra', lhs = ':luad[o]', desc = 'execute Lua command for each line' },
  { mode = 'Extra', lhs = ':luaf[ile]', desc = 'execute Lua script file' },
  { mode = 'Extra', lhs = ':lv[imgrep]', desc = 'search for pattern in files' },
  { mode = 'Extra', lhs = ':lvimgrepa[dd]', desc = 'like :vimgrep, but append to current list' },
  { mode = 'Extra', lhs = ':lw[indow]', desc = 'open or close location window' },
  { mode = 'Extra', lhs = ':m[ove]', desc = 'move lines' },
  { mode = 'Extra', lhs = ':ma[rk]', desc = 'set a mark' },
  { mode = 'Extra', lhs = ':mak[e]', desc = 'execute external command makeprg and parse error messages' },
  { mode = 'Extra', lhs = ':map', desc = 'show or enter a mapping' },
  { mode = 'Extra', lhs = ':mapc[lear]', desc = 'clear all mappings for Normal and Visual mode' },
  { mode = 'Extra', lhs = ':marks', desc = 'list all marks' },
  { mode = 'Extra', lhs = ':mat[ch]', desc = 'define a match to highlight' },
  { mode = 'Extra', lhs = ':me[nu]', desc = 'enter a new menu item' },
  { mode = 'Extra', lhs = ':menut[ranslate]', desc = 'add a menu translation item' },
  { mode = 'Extra', lhs = ':mes[sages]', desc = 'view previously displayed messages' },
  { mode = 'Extra', lhs = ':mk[exrc]', desc = 'write current mappings and settings to a file' },
  { mode = 'Extra', lhs = ':mks[ession]', desc = 'write session info to a file' },
  { mode = 'Extra', lhs = ':mksp[ell]', desc = 'produce .spl spell file' },
  { mode = 'Extra', lhs = ':mkv[imrc]', desc = 'write current mappings and settings to a file' },
  { mode = 'Extra', lhs = ':mkvie[w]', desc = 'write view of current window to a file' },
  { mode = 'Extra', lhs = ':mod[e]', desc = 'show or change the screen mode' },
  { mode = 'Extra', lhs = ':n[ext]', desc = 'go to next file in the argument list' },
  { mode = 'Extra', lhs = ':new', desc = 'create a new empty window' },
  { mode = 'Extra', lhs = ':nm[ap]', desc = 'like :map but for Normal mode' },
  { mode = 'Extra', lhs = ':nmapc[lear]', desc = 'clear all mappings for Normal mode' },
  { mode = 'Extra', lhs = ':nme[nu]', desc = 'add menu for Normal mode' },
  { mode = 'Extra', lhs = ':nn[oremap]', desc = 'like :noremap but for Normal mode' },
  { mode = 'Extra', lhs = ':nnoreme[nu]', desc = 'like :noremenu but for Normal mode' },
  { mode = 'Extra', lhs = ':noa[utocmd]', desc = 'following commands don\'t trigger autocommands' },
  { mode = 'Extra', lhs = ':no[remap]', desc = 'enter a mapping that will not be remapped' },
  { mode = 'Extra', lhs = ':noh[lsearch]', desc = 'suspend hlsearch highlighting' },
  { mode = 'Extra', lhs = ':norea[bbrev]', desc = 'enter an abbreviation that will not be remapped' },
  { mode = 'Extra', lhs = ':noreme[nu]', desc = 'enter a menu that will not be remapped' },
  { mode = 'Extra', lhs = ':norm[al]', desc = 'execute Normal mode commands' },
  { mode = 'Extra', lhs = ':nos[wapfile]', desc = 'following commands don\'t create a swap file' },
  { mode = 'Extra', lhs = ':nu[mber]', desc = 'print lines with line number' },
  { mode = 'Extra', lhs = ':nun[map]', desc = 'like :unmap but for Normal mode' },
  { mode = 'Extra', lhs = ':nunme[nu]', desc = 'remove menu for Normal mode' },
  { mode = 'Extra', lhs = ':ol[dfiles]', desc = 'list files that have marks in the |shada| file' },
  { mode = 'Extra', lhs = ':om[ap]', desc = 'like ":map" but for Operator-pending mode' },
  { mode = 'Extra', lhs = ':omapc[lear]', desc = 'remove all mappings for Operator-pending mode' },
  { mode = 'Extra', lhs = ':ome[nu]', desc = 'add menu for Operator-pending mode' },
  { mode = 'Extra', lhs = ':on[ly]', desc = 'close all windows except the current one' },
  { mode = 'Extra', lhs = ':ono[remap]', desc = 'like ":noremap" but for Operator-pending mode' },
  { mode = 'Extra', lhs = ':onoreme[nu]', desc = 'like ":noremenu" but for Operator-pending mode' },
  { mode = 'Extra', lhs = ':opt[ions]', desc = 'open the options-window' },
  { mode = 'Extra', lhs = ':ou[nmap]', desc = 'like ":unmap" but for Operator-pending mode' },
  { mode = 'Extra', lhs = ':ounme[nu]', desc = 'remove menu for Operator-pending mode' },
  { mode = 'Extra', lhs = ':ow[nsyntax]', desc = 'set new local syntax highlight for this window' },
  { mode = 'Extra', lhs = ':pa[ckadd]', desc = 'add a plugin from "packpath"' },
  { mode = 'Extra', lhs = ':packl[oadall]', desc = 'load all packages under "packpath"' },
  { mode = 'Extra', lhs = ':pc[lose]', desc = 'close preview window' },
  { mode = 'Extra', lhs = ':ped[it]', desc = 'edit file in the preview window' },
  { mode = 'Extra', lhs = ':pe[rl]', desc = 'execute perl command' },
  { mode = 'Extra', lhs = ':perld[o]', desc = 'execute perl command for each line' },
  { mode = 'Extra', lhs = ':perlf[ile]', desc = 'execute perl script file' },
  { mode = 'Extra', lhs = ':p[rint]', desc = 'print lines' },
  { mode = 'Extra', lhs = ':profd[el]', desc = 'stop profiling a function or script' },
  { mode = 'Extra', lhs = ':prof[ile]', desc = 'profiling functions and scripts' },
  { mode = 'Extra', lhs = ':po[p]', desc = 'jump to older entry in tag stack' },
  { mode = 'Extra', lhs = ':popu[p]', desc = 'popup a menu by name' },
  { mode = 'Extra', lhs = ':pp[op]', desc = '":pop" in preview window' },
  { mode = 'Extra', lhs = ':pre[serve]', desc = 'write all text to swap file' },
  { mode = 'Extra', lhs = ':prev[ious]', desc = 'go to previous file in argument list' },
  { mode = 'Extra', lhs = ':ps[earch]', desc = 'like ":ijump" but shows match in preview window' },
  { mode = 'Extra', lhs = ':pt[ag]', desc = 'show tag in preview window' },
  { mode = 'Extra', lhs = ':ptN[ext]', desc = '":tNext" in preview window' },
  { mode = 'Extra', lhs = ':ptf[irst]', desc = '":trewind" in preview window' },
  { mode = 'Extra', lhs = ':ptj[ump]', desc = '":tjump" and show tag in preview window' },
  { mode = 'Extra', lhs = ':ptl[ast]', desc = '":tlast" in preview window' },
  { mode = 'Extra', lhs = ':ptn[ext]', desc = '":tnext" in preview window' },
  { mode = 'Extra', lhs = ':ptp[revious]', desc = '":tprevious" in preview window' },
  { mode = 'Extra', lhs = ':ptr[ewind]', desc = '":trewind" in preview window' },
  { mode = 'Extra', lhs = ':pts[elect]', desc = '":tselect" and show tag in preview window' },
  { mode = 'Extra', lhs = ':pu[t]', desc = 'insert contents of register in the text' },
  { mode = 'Extra', lhs = ':pw[d]', desc = 'print current directory' },
  { mode = 'Extra', lhs = ':py3', desc = 'execute Python 3 command' },
  { mode = 'Extra', lhs = ':python3', desc = 'same as :py3' },
  { mode = 'Extra', lhs = ':py3d[o]', desc = 'execute Python 3 command for each line' },
  { mode = 'Extra', lhs = ':py3f[ile]', desc = 'execute Python 3 script file' },
  { mode = 'Extra', lhs = ':py[thon]', desc = 'execute Python command' },
  { mode = 'Extra', lhs = ':pyd[o]', desc = 'execute Python command for each line' },
  { mode = 'Extra', lhs = ':pyf[ile]', desc = 'execute Python script file' },
  { mode = 'Extra', lhs = ':pyx', desc = 'execute Python X command' },
  { mode = 'Extra', lhs = ':pythonx', desc = 'same as :pyx' },
  { mode = 'Extra', lhs = ':pyxd[o]', desc = 'execute Python X command for each line' },
  { mode = 'Extra', lhs = ':pyxf[ile]', desc = 'execute Python X script file' },
  { mode = 'Extra', lhs = ':q[uit]', desc = 'quit current window' },
  { mode = 'Extra', lhs = ':quita[ll]', desc = 'quit Vim' },
  { mode = 'Extra', lhs = ':qa[ll]', desc = 'quit Vim' },
  { mode = 'Extra', lhs = ':r[ead]', desc = 'read file into the text' },
  { mode = 'Extra', lhs = ':rec[over]', desc = 'recover a file from a swap file' },
  { mode = 'Extra', lhs = ':red[o]', desc = 'redo one undone change' },
  { mode = 'Extra', lhs = ':redi[r]', desc = 'redirect messages to a file or register' },
  { mode = 'Extra', lhs = ':redr[aw]', desc = 'force a redraw of the display' },
  { mode = 'Extra', lhs = ':redraws[tatus]', desc = 'force a redraw of the status line(s) and window bar(s)' },
  { mode = 'Extra', lhs = ':redrawt[abline]', desc = 'force a redraw of the tabline' },
  { mode = 'Extra', lhs = ':reg[isters]', desc = 'display the contents of registers' },
  { mode = 'Extra', lhs = ':res[ize]', desc = 'change current window height' },
  { mode = 'Extra', lhs = ':ret[ab]', desc = 'change tab size' },
  { mode = 'Extra', lhs = ':retu[rn]', desc = 'return from a user function' },
  { mode = 'Extra', lhs = ':rew[ind]', desc = 'go to the first file in the argument list' },
  { mode = 'Extra', lhs = ':ri[ght]', desc = 'right align text' },
  { mode = 'Extra', lhs = ':rightb[elow]', desc = 'make split window appear right or below' },
  { mode = 'Extra', lhs = ':rsh[ada]', desc = 'read from ShaDa file' },
  { mode = 'Extra', lhs = ':rub[y]', desc = 'execute Ruby command' },
  { mode = 'Extra', lhs = ':rubyd[o]', desc = 'execute Ruby command for each line' },
  { mode = 'Extra', lhs = ':rubyf[ile]', desc = 'execute Ruby script file' },
  { mode = 'Extra', lhs = ':rund[o]', desc = 'read undo information from a file' },
  { mode = 'Extra', lhs = ':ru[ntime]', desc = 'source vim scripts in runtimepath' },
  { mode = 'Extra', lhs = ':s[ubstitute]', desc = 'find and replace text' },
  { mode = 'Extra', lhs = ':sN[ext]', desc = 'split window and go to previous file in argument list' },
  { mode = 'Extra', lhs = ':san[dbox]', desc = 'execute a command in the sandbox' },
  { mode = 'Extra', lhs = ':sa[rgument]', desc = 'split window and go to specific file in argument list' },
  { mode = 'Extra', lhs = ':sal[l]', desc = 'open a window for each file in argument list' },
  { mode = 'Extra', lhs = ':sav[eas]', desc = 'save file under another name.' },
  { mode = 'Extra', lhs = ':sb[uffer]', desc = 'split window and go to specific file in the buffer list' },
  { mode = 'Extra', lhs = ':sbN[ext]', desc = 'split window and go to previous file in the buffer list' },
  { mode = 'Extra', lhs = ':sba[ll]', desc = 'open a window for each file in the buffer list' },
  { mode = 'Extra', lhs = ':sbf[irst]', desc = 'split window and go to first file in the buffer list' },
  { mode = 'Extra', lhs = ':sbl[ast]', desc = 'split window and go to last file in buffer list' },
  { mode = 'Extra', lhs = ':sbm[odified]', desc = 'split window and go to modified file in the buffer list' },
  { mode = 'Extra', lhs = ':sbn[ext]', desc = 'split window and go to next file in the buffer list' },
  { mode = 'Extra', lhs = ':sbp[revious]', desc = 'split window and go to previous file in the buffer list' },
  { mode = 'Extra', lhs = ':sbr[ewind]', desc = 'split window and go to first file in the buffer list' },
  { mode = 'Extra', lhs = ':scr[iptnames]', desc = 'list names of all sourced Vim scripts' },
  { mode = 'Extra', lhs = ':scripte[ncoding]', desc = 'encoding used in sourced Vim script' },
  { mode = 'Extra', lhs = ':se[t]', desc = 'show or set options' },
  { mode = 'Extra', lhs = ':setf[iletype]', desc = 'set filetype, unless it was set already' },
  { mode = 'Extra', lhs = ':setg[lobal]', desc = 'show global values of options' },
  { mode = 'Extra', lhs = ':setl[ocal]', desc = 'show or set options locally' },
  { mode = 'Extra', lhs = ':sf[ind]', desc = 'split current window and edit file in "path"' },
  { mode = 'Extra', lhs = ':sfir[st]', desc = 'split window and go to first file in the argument list' },
  { mode = 'Extra', lhs = ':sig[n]', desc = 'manipulate signs' },
  { mode = 'Extra', lhs = ':sil[ent]', desc = 'run a command silently' },
  { mode = 'Extra', lhs = ':sl[eep]', desc = 'do nothing for a few seconds' },
  { mode = 'Extra', lhs = ':sla[st]', desc = 'split window and go to last file in the argument list' },
  { mode = 'Extra', lhs = ':sm[agic]', desc = 'substitute with magic' },
  { mode = 'Extra', lhs = ':smap', desc = 'like ":map" but for Select mode' },
  { mode = 'Extra', lhs = ':smapc[lear]', desc = 'remove all mappings for Select mode' },
  { mode = 'Extra', lhs = ':sme[nu]', desc = 'add menu for Select mode' },
  { mode = 'Extra', lhs = ':sn[ext]', desc = 'split window and go to next file in the argument list' },
  { mode = 'Extra', lhs = ':sno[magic]', desc = 'substitute with nomagic' },
  { mode = 'Extra', lhs = ':snor[emap]', desc = 'like ":noremap" but for Select mode' },
  { mode = 'Extra', lhs = ':snoreme[nu]', desc = 'like ":noremenu" but for Select mode' },
  { mode = 'Extra', lhs = ':sor[t]', desc = 'sort lines' },
  { mode = 'Extra', lhs = ':so[urce]', desc = 'read Vim or Ex commands from a file' },
  { mode = 'Extra', lhs = ':spelld[ump]', desc = 'split window and fill with all correct words' },
  { mode = 'Extra', lhs = ':spe[llgood]', desc = 'add good word for spelling' },
  { mode = 'Extra', lhs = ':spelli[nfo]', desc = 'show info about loaded spell files' },
  { mode = 'Extra', lhs = ':spellra[re]', desc = 'add rare word for spelling' },
  { mode = 'Extra', lhs = ':spellr[epall]', desc = 'replace all bad words like last |z=|' },
  { mode = 'Extra', lhs = ':spellu[ndo]', desc = 'remove good or bad word' },
  { mode = 'Extra', lhs = ':spellw[rong]', desc = 'add spelling mistake' },
  { mode = 'Extra', lhs = ':sp[lit]', desc = 'split current window' },
  { mode = 'Extra', lhs = ':spr[evious]', desc = 'split window and go to previous file in the argument list' },
  { mode = 'Extra', lhs = ':sre[wind]', desc = 'split window and go to first file in the argument list' },
  { mode = 'Extra', lhs = ':st[op]', desc = 'suspend the editor or escape to a shell' },
  { mode = 'Extra', lhs = ':sta[g]', desc = 'split window and jump to a tag' },
  { mode = 'Extra', lhs = ':star[tinsert]', desc = 'start Insert mode' },
  { mode = 'Extra', lhs = ':startg[replace]', desc = 'start Virtual Replace mode' },
  { mode = 'Extra', lhs = ':startr[eplace]', desc = 'start Replace mode' },
  { mode = 'Extra', lhs = ':stopi[nsert]', desc = 'stop Insert mode' },
  { mode = 'Extra', lhs = ':stj[ump]', desc = 'do ":tjump" and split window' },
  { mode = 'Extra', lhs = ':sts[elect]', desc = 'do ":tselect" and split window' },
  { mode = 'Extra', lhs = ':sun[hide]', desc = 'same as ":unhide"' },
  { mode = 'Extra', lhs = ':sunm[ap]', desc = 'like ":unmap" but for Select mode' },
  { mode = 'Extra', lhs = ':sunme[nu]', desc = 'remove menu for Select mode' },
  { mode = 'Extra', lhs = ':sus[pend]', desc = 'same as ":stop"' },
  { mode = 'Extra', lhs = ':sv[iew]', desc = 'split window and edit file read-only' },
  { mode = 'Extra', lhs = ':sw[apname]', desc = 'show the name of the current swap file' },
  { mode = 'Extra', lhs = ':sy[ntax]', desc = 'syntax highlighting' },
  { mode = 'Extra', lhs = ':synti[me]', desc = 'measure syntax highlighting speed' },
  { mode = 'Extra', lhs = ':sync[bind]', desc = 'sync scroll binding' },
  { mode = 'Extra', lhs = ':t', desc = 'same as ":copy"' },
  { mode = 'Extra', lhs = ':tN[ext]', desc = 'jump to previous matching tag' },
  { mode = 'Extra', lhs = ':tabN[ext]', desc = 'go to previous tab page' },
  { mode = 'Extra', lhs = ':tabc[lose]', desc = 'close current tab page' },
  { mode = 'Extra', lhs = ':tabdo', desc = 'execute command in each tab page' },
  { mode = 'Extra', lhs = ':tabe[dit]', desc = 'edit a file in a new tab page' },
  { mode = 'Extra', lhs = ':tabf[ind]', desc = 'find file in "path", edit it in a new tab page' },
  { mode = 'Extra', lhs = ':tabfir[st]', desc = 'go to first tab page' },
  { mode = 'Extra', lhs = ':tabl[ast]', desc = 'go to last tab page' },
  { mode = 'Extra', lhs = ':tabm[ove]', desc = 'move tab page to other position' },
  { mode = 'Extra', lhs = ':tabnew', desc = 'edit a file in a new tab page' },
  { mode = 'Extra', lhs = ':tabn[ext]', desc = 'go to next tab page' },
  { mode = 'Extra', lhs = ':tabo[nly]', desc = 'close all tab pages except the current one' },
  { mode = 'Extra', lhs = ':tabp[revious]', desc = 'go to previous tab page' },
  { mode = 'Extra', lhs = ':tabr[ewind]', desc = 'go to first tab page' },
  { mode = 'Extra', lhs = ':tabs', desc = 'list the tab pages and what they contain' },
  { mode = 'Extra', lhs = ':tab', desc = 'create new tab when opening new window' },
  { mode = 'Extra', lhs = ':ta[g]', desc = 'jump to tag' },
  { mode = 'Extra', lhs = ':tags', desc = 'show the contents of the tag stack' },
  { mode = 'Extra', lhs = ':tc[d]', desc = 'change directory for tab page' },
  { mode = 'Extra', lhs = ':tch[dir]', desc = 'change directory for tab page' },
  { mode = 'Extra', lhs = ':te[rminal]', desc = 'open a terminal buffer' },
  { mode = 'Extra', lhs = ':tf[irst]', desc = 'jump to first matching tag' },
  { mode = 'Extra', lhs = ':th[row]', desc = 'throw an exception' },
  { mode = 'Extra', lhs = ':tj[ump]', desc = 'like ":tselect", but jump directly when there is only one match' },
  { mode = 'Extra', lhs = ':tl[ast]', desc = 'jump to last matching tag' },
  { mode = 'Extra', lhs = ':tlm[enu]', desc = 'add menu for Terminal-mode' },
  { mode = 'Extra', lhs = ':tln[oremenu]', desc = 'like ":noremenu" but for Terminal-mode' },
  { mode = 'Extra', lhs = ':tlu[nmenu]', desc = 'remove menu for Terminal-mode' },
  { mode = 'Extra', lhs = ':tmapc[lear]', desc = 'remove all mappings for Terminal-mode' },
  { mode = 'Extra', lhs = ':tma[p]', desc = 'like ":map" but for Terminal-mode' },
  { mode = 'Extra', lhs = ':tm[enu]', desc = 'define menu tooltip' },
  { mode = 'Extra', lhs = ':tn[ext]', desc = 'jump to next matching tag' },
  { mode = 'Extra', lhs = ':tno[remap]', desc = 'like ":noremap" but for Terminal-mode' },
  { mode = 'Extra', lhs = ':to[pleft]', desc = 'make split window appear at top or far left' },
  { mode = 'Extra', lhs = ':tp[revious]', desc = 'jump to previous matching tag' },
  { mode = 'Extra', lhs = ':tr[ewind]', desc = 'jump to first matching tag' },
  { mode = 'Extra', lhs = ':trust', desc = 'add or remove file from trust database' },
  { mode = 'Extra', lhs = ':try', desc = 'execute commands, abort on error or exception' },
  { mode = 'Extra', lhs = ':ts[elect]', desc = 'list matching tags and select one' },
  { mode = 'Extra', lhs = ':tunma[p]', desc = 'like ":unmap" but for Terminal-mode' },
  { mode = 'Extra', lhs = ':tu[nmenu]', desc = 'remove menu tooltip' },
  { mode = 'Extra', lhs = ':u[ndo]', desc = 'undo last change(s)' },
  { mode = 'Extra', lhs = ':undoj[oin]', desc = 'join next change with previous undo block' },
  { mode = 'Extra', lhs = ':undol[ist]', desc = 'list leafs of the undo tree' },
  { mode = 'Extra', lhs = ':una[bbreviate]', desc = 'remove abbreviation' },
  { mode = 'Extra', lhs = ':unh[ide]', desc = 'open a window for each loaded file in the buffer list' },
  { mode = 'Extra', lhs = ':unl[et]', desc = 'delete variable' },
  { mode = 'Extra', lhs = ':unlo[ckvar]', desc = 'unlock variables' },
  { mode = 'Extra', lhs = ':unm[ap]', desc = 'remove mapping' },
  { mode = 'Extra', lhs = ':unme[nu]', desc = 'remove menu' },
  { mode = 'Extra', lhs = ':uns[ilent]', desc = 'run a command not silently' },
  { mode = 'Extra', lhs = ':up[date]', desc = 'write buffer if modified' },
  { mode = 'Extra', lhs = ':v[global]', desc = 'execute commands for not matching lines' },
  { mode = 'Extra', lhs = ':ve[rsion]', desc = 'print version number and other info' },
  { mode = 'Extra', lhs = ':verb[ose]', desc = 'execute command with "verbose" set' },
  { mode = 'Extra', lhs = ':vert[ical]', desc = 'make following command split vertically' },
  { mode = 'Extra', lhs = ':vim[grep]', desc = 'search for pattern in files' },
  { mode = 'Extra', lhs = ':vimgrepa[dd]', desc = 'like :vimgrep, but append to current list' },
  { mode = 'Extra', lhs = ':vi[sual]', desc = 'same as ":edit", but turns off Ex mode' },
  { mode = 'Extra', lhs = ':viu[sage]', desc = 'overview of Normal mode commands' },
  { mode = 'Extra', lhs = ':vie[w]', desc = 'edit a file read-only' },
  { mode = 'Extra', lhs = ':vm[ap]', desc = 'like ":map" but for Visual+Select mode' },
  { mode = 'Extra', lhs = ':vmapc[lear]', desc = 'remove all mappings for Visual+Select mode' },
  { mode = 'Extra', lhs = ':vme[nu]', desc = 'add menu for Visual+Select mode' },
  { mode = 'Extra', lhs = ':vne[w]', desc = 'create a new empty window, vertically split' },
  { mode = 'Extra', lhs = ':vn[oremap]', desc = 'like ":noremap" but for Visual+Select mode' },
  { mode = 'Extra', lhs = ':vnoreme[nu]', desc = 'like ":noremenu" but for Visual+Select mode' },
  { mode = 'Extra', lhs = ':vs[plit]', desc = 'split current window vertically' },
  { mode = 'Extra', lhs = ':vu[nmap]', desc = 'like ":unmap" but for Visual+Select mode' },
  { mode = 'Extra', lhs = ':vunme[nu]', desc = 'remove menu for Visual+Select mode' },
  { mode = 'Extra', lhs = ':windo', desc = 'execute command in each window' },
  { mode = 'Extra', lhs = ':w[rite]', desc = 'write to a file' },
  { mode = 'Extra', lhs = ':wN[ext]', desc = 'write to a file and go to previous file in argument list' },
  { mode = 'Extra', lhs = ':wa[ll]', desc = 'write all (changed) buffers' },
  { mode = 'Extra', lhs = ':wh[ile]', desc = 'execute loop for as long as condition met' },
  { mode = 'Extra', lhs = ':wi[nsize]', desc = 'get or set window size (obsolete)' },
  { mode = 'Extra', lhs = ':winc[md]', desc = 'execute a Window (CTRL-W) command' },
  { mode = 'Extra', lhs = ':winp[os]', desc = 'get or set window position' },
  { mode = 'Extra', lhs = ':wn[ext]', desc = 'write to a file and go to next file in argument list' },
  { mode = 'Extra', lhs = ':wp[revious]', desc = 'write to a file and go to previous file in argument list' },
  { mode = 'Extra', lhs = ':wq', desc = 'write to a file and quit window or Vim' },
  { mode = 'Extra', lhs = ':wqa[ll]', desc = 'write all changed buffers and quit Vim' },
  { mode = 'Extra', lhs = ':wsh[ada]', desc = 'write to ShaDa file' },
  { mode = 'Extra', lhs = ':wu[ndo]', desc = 'write undo information to a file' },
  { mode = 'Extra', lhs = ':x[it]', desc = 'write if buffer changed and close window' },
  { mode = 'Extra', lhs = ':xa[ll]', desc = 'same as ":wqall"' },
  { mode = 'Extra', lhs = ':xmapc[lear]', desc = 'remove all mappings for Visual mode' },
  { mode = 'Extra', lhs = ':xm[ap]', desc = 'like ":map" but for Visual mode' },
  { mode = 'Extra', lhs = ':xme[nu]', desc = 'add menu for Visual mode' },
  { mode = 'Extra', lhs = ':xn[oremap]', desc = 'like ":noremap" but for Visual mode' },
  { mode = 'Extra', lhs = ':xnoreme[nu]', desc = 'like ":noremenu" but for Visual mode' },
  { mode = 'Extra', lhs = ':xu[nmap]', desc = 'like ":unmap" but for Visual mode' },
  { mode = 'Extra', lhs = ':xunme[nu]', desc = 'remove menu for Visual mode' },
  { mode = 'Extra', lhs = ':y[ank]', desc = 'yank lines into a register' },
  { mode = 'Extra', lhs = ':z', desc = 'print some lines' },
  { mode = 'Extra', lhs = ':~', desc = 'repeat last ":substitute"' }
}

return common_vim_keybindings
